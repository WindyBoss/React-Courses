import { ComponentType, ReactNode, PropsWithChildren, ReactElement, ErrorInfo } from "react";
declare type ComponentDidCatch = (error: unknown, errorInfo: ErrorInfo) => void;
export declare function ErrorBoundaryContext({ children, }: {
    children?: ReactNode | undefined;
}): JSX.Element;
export declare namespace ErrorBoundaryContext {
    var displayName: string;
}
export declare function withErrorBoundary<Props = Record<string, unknown>>(WrappedComponent: ComponentType<Props>): (props: PropsWithChildren<Props>) => ReactElement<any, any>;
declare type UseErrorBoundaryReturn = [
    error: unknown | undefined,
    resetError: () => void
];
export declare function useErrorBoundary(componentDidCatch?: ComponentDidCatch): UseErrorBoundaryReturn;
export {};
