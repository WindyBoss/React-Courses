"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useErrorBoundary = exports.withErrorBoundary = exports.ErrorBoundaryContext = void 0;
const react_1 = __importStar(require("react"));
class ErrorBoundary extends react_1.Component {
    displayName = "ReactUseErrorBoundary";
    componentDidCatch(...args) {
        this.setState({});
        this.props.onError(...args);
    }
    render() {
        return this.props.children;
    }
}
const noop = () => false;
const errorBoundaryContext = (0, react_1.createContext)({
    componentDidCatch: { current: undefined },
    error: undefined,
    setError: noop,
});
function ErrorBoundaryContext({ children, }) {
    const [error, setError] = (0, react_1.useState)();
    const componentDidCatch = (0, react_1.useRef)();
    const ctx = (0, react_1.useMemo)(() => ({
        componentDidCatch,
        error,
        setError,
    }), [error]);
    return (react_1.default.createElement(errorBoundaryContext.Provider, { value: ctx },
        react_1.default.createElement(ErrorBoundary, { error: error, onError: (error, errorInfo) => {
                setError(error);
                componentDidCatch.current?.(error, errorInfo);
            } }, children)));
}
exports.ErrorBoundaryContext = ErrorBoundaryContext;
ErrorBoundaryContext.displayName = "ReactUseErrorBoundaryContext";
function withErrorBoundary(WrappedComponent) {
    function WithErrorBoundary(props) {
        return (react_1.default.createElement(ErrorBoundaryContext, null,
            react_1.default.createElement(WrappedComponent, { key: "WrappedComponent", ...props })));
    }
    WithErrorBoundary.displayName = `WithErrorBoundary(${WrappedComponent.displayName ?? WrappedComponent.name ?? "Component"})`;
    return WithErrorBoundary;
}
exports.withErrorBoundary = withErrorBoundary;
function useErrorBoundary(componentDidCatch) {
    const ctx = (0, react_1.useContext)(errorBoundaryContext);
    ctx.componentDidCatch.current = componentDidCatch;
    const resetError = (0, react_1.useCallback)(() => {
        ctx.setError(undefined);
    }, []);
    return [ctx.error, resetError];
}
exports.useErrorBoundary = useErrorBoundary;
