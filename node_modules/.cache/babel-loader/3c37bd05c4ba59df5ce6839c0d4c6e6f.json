{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/context/themeProvider.js\";\nimport React, { Component, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { themeContext } from './authContext';\nimport { theme } from '../theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ThemeProviderClass extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      mainTheme: theme.local,\n      changeTheme: () => {\n        if (this.state.mainTheme === theme.dark) {\n          this.setState({\n            mainTheme: theme.light\n          });\n        }\n\n        if (this.state.mainTheme === theme.light) {\n          this.setState({\n            mainTheme: theme.dark\n          });\n        }\n\n        ;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(themeContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n; // export function ThemeProvider({ children }) {\n//     const [mainTheme, setMainTheme] = useState(theme.light);\n//     const changeTheme = () => {\n//         if (mainTheme === theme.dark) {\n//             setMainTheme(theme.light);\n//         }\n//         if (mainTheme === theme.light) {\n//             setMainTheme(theme.dark);\n//         };\n//     };\n//     const provideTheme = useMemo(() => {\n//         return { mainTheme, changeTheme }\n//     }, [mainTheme])\n//     return ( \n//     <themeContext.Provider value = { provideTheme }> \n//         { children } \n//     </themeContext.Provider>\n//     );\n// };","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/context/themeProvider.js"],"names":["React","Component","useMemo","useState","PropTypes","themeContext","theme","ThemeProviderClass","state","mainTheme","local","changeTheme","dark","setState","light","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAGA,eAAe,MAAMC,kBAAN,SAAiCN,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACtDO,KADsD,GAC9C;AACJC,MAAAA,SAAS,EAAEH,KAAK,CAACI,KADb;AAEJC,MAAAA,WAAW,EAAE,MAAM;AACf,YAAI,KAAKH,KAAL,CAAWC,SAAX,KAAyBH,KAAK,CAACM,IAAnC,EAAyC;AACrC,eAAKC,QAAL,CAAe;AAAEJ,YAAAA,SAAS,EAAEH,KAAK,CAACQ;AAAnB,WAAf;AACH;;AACD,YAAI,KAAKN,KAAL,CAAWC,SAAX,KAAyBH,KAAK,CAACQ,KAAnC,EAA0C;AACtC,eAAKD,QAAL,CAAe;AAAEJ,YAAAA,SAAS,EAAEH,KAAK,CAACM;AAAnB,WAAf;AACH;;AAAA;AACJ;AATG,KAD8C;AAAA;;AAatDG,EAAAA,MAAM,GAAG;AACL,wBACA,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAK,KAAKP,KAAtC;AAAA,gBACM,KAAKQ,KAAL,CAAWC;AADjB;AAAA;AAAA;AAAA;AAAA,YADA;AAKH;;AAnBqD;AAoBzD,C,CAGD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { themeContext } from './authContext';\nimport { theme } from '../theme';\n\n\nexport default class ThemeProviderClass extends Component {\n    state = {\n        mainTheme: theme.local,\n        changeTheme: () => {\n            if (this.state.mainTheme === theme.dark) {\n                this.setState( { mainTheme: theme.light });\n            }\n            if (this.state.mainTheme === theme.light) {\n                this.setState( { mainTheme: theme.dark });\n            }; \n        }\n    };\n\n    render() {\n        return ( \n        <themeContext.Provider value = { this.state }> \n            { this.props.children } \n        </themeContext.Provider>\n        );\n    };\n};\n\n\n// export function ThemeProvider({ children }) {\n//     const [mainTheme, setMainTheme] = useState(theme.light);\n\n//     const changeTheme = () => {\n//         if (mainTheme === theme.dark) {\n//             setMainTheme(theme.light);\n//         }\n//         if (mainTheme === theme.light) {\n//             setMainTheme(theme.dark);\n//         };\n//     };\n\n//     const provideTheme = useMemo(() => {\n//         return { mainTheme, changeTheme }\n//     }, [mainTheme])\n\n//     return ( \n//     <themeContext.Provider value = { provideTheme }> \n//         { children } \n//     </themeContext.Provider>\n//     );\n// };"]},"metadata":{},"sourceType":"module"}