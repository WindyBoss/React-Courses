{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport axios from 'axios';\nexport const todoApi = createApi({\n  reducerPath: 'todoApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3000/'\n  }),\n  endpoints: builder => ({\n    getAllTodos: builder.query({\n      query: () => ({\n        url: 'todos',\n        method: 'GET'\n      }),\n      providesTags: result => console.log(result) // result ? [\n      //     ...result.map(({ id }) => ({\n      //         type: 'Todo',\n      //         id,\n      //     })),\n      //     { type: 'Todo', id: 'LIST' },\n      // ] : [{ type: 'Todo', id: 'LIST' }],\n\n    }),\n    addTodo: builder.mutation({\n      query: body => ({\n        url: 'todos',\n        method: 'POST',\n        body\n      })\n    }),\n    toggleComplete: builder.mutation({\n      query: _ref => {\n        let {\n          id,\n          ...patch\n        } = _ref;\n        return {\n          url: `todos/${id}`,\n          method: 'PUT',\n          body: patch\n        };\n      }\n    }),\n    deleteTodo: builder.mutation({\n      query: id => ({\n        url: `todos/${id}`,\n        method: 'DELETE'\n      })\n    })\n  })\n});\nexport const {\n  useGetAllTodosQuery\n} = todoApi;\nconsole.log(todoApi);\nexport const getTodos = async () => {\n  const {\n    data\n  } = await axios.get('http://localhost:3000/todos');\n  return data;\n};\nexport const postTodos = async todo => {\n  const {\n    data\n  } = await axios.post('http://localhost:3000/todos', todo);\n  return data;\n};\nexport const deleteTodos = async todoId => {\n  const {\n    data\n  } = await axios.delete('http://localhost:3000/todos', todoId);\n  return data;\n};","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/service/apiService.js"],"names":["createApi","fetchBaseQuery","axios","todoApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getAllTodos","query","url","method","providesTags","result","console","log","addTodo","mutation","body","toggleComplete","id","patch","deleteTodo","useGetAllTodosQuery","getTodos","data","get","postTodos","todo","post","deleteTodos","todoId","delete"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,OAAO,GAAGH,SAAS,CAAC;AAC7BI,EAAAA,WAAW,EAAE,SADgB;AAE7BC,EAAAA,SAAS,EAAEJ,cAAc,CAAC;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFI;AAG7BC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACnBC,IAAAA,WAAW,EAAED,OAAO,CAACE,KAAR,CAAc;AACvBA,MAAAA,KAAK,EAAE,OAAO;AACVC,QAAAA,GAAG,EAAE,OADK;AAEVC,QAAAA,MAAM,EAAE;AAFE,OAAP,CADgB;AAKvBC,MAAAA,YAAY,EAAEC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CALD,CAMvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAZuB,KAAd,CADM;AAgBnBG,IAAAA,OAAO,EAAET,OAAO,CAACU,QAAR,CAAiB;AACtBR,MAAAA,KAAK,EAAES,IAAI,KAAK;AACZR,QAAAA,GAAG,EAAE,OADO;AAEZC,QAAAA,MAAM,EAAE,MAFI;AAGZO,QAAAA;AAHY,OAAL;AADW,KAAjB,CAhBU;AAuBnBC,IAAAA,cAAc,EAAEZ,OAAO,CAACU,QAAR,CAAiB;AAC7BR,MAAAA,KAAK,EAAE;AAAA,YAAC;AAAEW,UAAAA,EAAF;AAAM,aAAGC;AAAT,SAAD;AAAA,eAAuB;AAC1BX,UAAAA,GAAG,EAAG,SAAQU,EAAG,EADS;AAE1BT,UAAAA,MAAM,EAAE,KAFkB;AAG1BO,UAAAA,IAAI,EAAEG;AAHoB,SAAvB;AAAA;AADsB,KAAjB,CAvBG;AA8BnBC,IAAAA,UAAU,EAAEf,OAAO,CAACU,QAAR,CAAiB;AACzBR,MAAAA,KAAK,EAAEW,EAAE,KAAK;AACVV,QAAAA,GAAG,EAAG,SAAQU,EAAG,EADP;AAEVT,QAAAA,MAAM,EAAE;AAFE,OAAL;AADgB,KAAjB;AA9BO,GAAL;AAHW,CAAD,CAAzB;AA0CP,OAAO,MAAM;AAAEY,EAAAA;AAAF,IAA0BrB,OAAhC;AACPY,OAAO,CAACC,GAAR,CAAYb,OAAZ;AAEA,OAAO,MAAMsB,QAAQ,GAAG,YAAW;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMxB,KAAK,CAACyB,GAAN,CAAU,6BAAV,CAAvB;AACA,SAAOD,IAAP;AACH,CAHM;AAKP,OAAO,MAAME,SAAS,GAAG,MAAMC,IAAN,IAAc;AACnC,QAAM;AAAEH,IAAAA;AAAF,MAAW,MAAMxB,KAAK,CAAC4B,IAAN,CAAW,6BAAX,EAA0CD,IAA1C,CAAvB;AACA,SAAOH,IAAP;AACH,CAHM;AAKP,OAAO,MAAMK,WAAW,GAAG,MAAMC,MAAN,IAAgB;AACvC,QAAM;AAAEN,IAAAA;AAAF,MAAW,MAAMxB,KAAK,CAAC+B,MAAN,CAAa,6BAAb,EAA4CD,MAA5C,CAAvB;AACA,SAAON,IAAP;AACH,CAHM","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport axios from 'axios';\n\nexport const todoApi = createApi({\n    reducerPath: 'todoApi',\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3000/' }),\n    endpoints: builder => ({\n        getAllTodos: builder.query({\n            query: () => ({\n                url: 'todos',\n                method: 'GET',\n            }),\n            providesTags: result => console.log(result),\n            // result ? [\n            //     ...result.map(({ id }) => ({\n            //         type: 'Todo',\n            //         id,\n            //     })),\n            //     { type: 'Todo', id: 'LIST' },\n            // ] : [{ type: 'Todo', id: 'LIST' }],\n        }),\n\n        addTodo: builder.mutation({\n            query: body => ({\n                url: 'todos',\n                method: 'POST',\n                body,\n            }),\n        }),\n        toggleComplete: builder.mutation({\n            query: ({ id, ...patch }) => ({\n                url: `todos/${id}`,\n                method: 'PUT',\n                body: patch,\n            }),\n        }),\n        deleteTodo: builder.mutation({\n            query: id => ({\n                url: `todos/${id}`,\n                method: 'DELETE',\n            }),\n        }),\n    }),\n});\n\nexport const { useGetAllTodosQuery } = todoApi;\nconsole.log(todoApi);\n\nexport const getTodos = async() => {\n    const { data } = await axios.get('http://localhost:3000/todos');\n    return data;\n};\n\nexport const postTodos = async todo => {\n    const { data } = await axios.post('http://localhost:3000/todos', todo);\n    return data;\n};\n\nexport const deleteTodos = async todoId => {\n    const { data } = await axios.delete('http://localhost:3000/todos', todoId);\n    return data;\n};"]},"metadata":{},"sourceType":"module"}