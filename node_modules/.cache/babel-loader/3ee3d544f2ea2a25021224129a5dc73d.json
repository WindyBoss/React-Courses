{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  todos: []\n};\nexport const todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.todos.push(payload);\n    },\n    // addTodo: state => {\n    //     console.log(state.todos);\n    // },\n    deleteTodo: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return state.todos.filter(_ref3 => {\n        let {\n          id\n        } = _ref3;\n        return id !== payload;\n      });\n    },\n    toggleComplicated: (_ref4, _ref5) => {\n      let {\n        todos\n      } = _ref4;\n      let {\n        payload\n      } = _ref5;\n      console.log(todos);\n      return todos.map(todo => todos.id === payload ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n    }\n  }\n}); // export const todoSlice = createSlice({\n//     name: 'todos',\n//     initialState,\n//     reducers: {\n//         addTodo: (state, { payload }) => {\n//             state.todos.push(payload);\n//         },\n//         deleteTodo: (state, { payload }) =>\n//             state.todos.filter(({ id }) => id !== payload),\n// toggleComplicated: ({ todoList }, { payload }) => {\n//     console.log(todoList);\n//     return todoList.map(todo =>\n//         todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//     );\n// },\n//     },\n// });\n\nexport const {\n  addTodo,\n  deleteTodo,\n  toggleComplicated\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoSlice.js"],"names":["createSlice","initialState","todos","todoSlice","name","reducers","addTodo","state","payload","push","deleteTodo","filter","id","toggleComplicated","console","log","map","todo","completed","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,OAD2B;AAEjCH,EAAAA,YAFiC;AAGjCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAC7BD,MAAAA,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiBD,OAAjB;AACH,KAHK;AAKN;AACA;AACA;AAEAE,IAAAA,UAAU,EAAE,CAACH,KAAD;AAAA,UAAQ;AAAEC,QAAAA;AAAF,OAAR;AAAA,aACRD,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmB;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKJ,OAAnB;AAAA,OAAnB,CADQ;AAAA,KATN;AAYNK,IAAAA,iBAAiB,EAAE,kBAA4B;AAAA,UAA3B;AAAEX,QAAAA;AAAF,OAA2B;AAAA,UAAhB;AAAEM,QAAAA;AAAF,OAAgB;AAC3CM,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACA,aAAOA,KAAK,CAACc,GAAN,CAAUC,IAAI,IACjBf,KAAK,CAACU,EAAN,KAAaJ,OAAb,GAAuB,EAAC,GAAGS,IAAJ;AAAUC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,OAAvB,GAAgED,IAD7D,CAAP;AAGH;AAjBK;AAHuB,CAAD,CAA7B,C,CAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM;AAAEX,EAAAA,OAAF;AAAWI,EAAAA,UAAX;AAAuBG,EAAAA;AAAvB,IAA6CV,SAAS,CAACgB,OAA7D;AAEP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    todos: [],\n};\n\nexport const todoSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        addTodo: (state, { payload }) => {\n            state.todos.push(payload);\n        },\n\n        // addTodo: state => {\n        //     console.log(state.todos);\n        // },\n\n        deleteTodo: (state, { payload }) =>\n            state.todos.filter(({ id }) => id !== payload),\n\n        toggleComplicated: ({ todos }, { payload }) => {\n            console.log(todos);\n            return todos.map(todo =>\n                todos.id === payload ? {...todo, completed: !todo.completed } : todo\n            );\n        },\n    },\n});\n\n// export const todoSlice = createSlice({\n//     name: 'todos',\n//     initialState,\n//     reducers: {\n//         addTodo: (state, { payload }) => {\n//             state.todos.push(payload);\n//         },\n\n//         deleteTodo: (state, { payload }) =>\n//             state.todos.filter(({ id }) => id !== payload),\n\n// toggleComplicated: ({ todoList }, { payload }) => {\n//     console.log(todoList);\n//     return todoList.map(todo =>\n//         todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//     );\n// },\n//     },\n// });\n\nexport const { addTodo, deleteTodo, toggleComplicated } = todoSlice.actions;\n\nexport default todoSlice.reducer;"]},"metadata":{},"sourceType":"module"}