{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/PublicationList/PublicationList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Preview from '../Preview';\nimport { deletePublications } from 'services/readerApi';\nimport { useFetch } from 'hooks';\nimport { withApiState } from 'services/ApiState';\nimport toast from 'react-hot-toast';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    apiState\n  } = _ref;\n  const [publicationId, setPublicationId] = useState(0);\n  const navigate = useNavigate();\n  const location = useLocation(); // - hook which returns object with url features (pathName, searchParams, hashes, etc...)\n\n  console.log(location);\n\n  const takeId = id => {\n    setPublicationId(id);\n    navigate(-1);\n    toast.success('Publication has been deleted');\n  };\n\n  const {\n    state\n  } = useFetch({\n    fetchFunc: deletePublications,\n    apiState: apiState,\n    firstRenderCheck: true,\n    initialValue: null,\n    addProp: publicationId,\n    stopFirstRender: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Preview, {\n      newState: state,\n      onClick: takeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(List, \"zPFhgD5VLgNEPQt4lX5k8HUbrJ4=\", false, function () {\n  return [useNavigate, useLocation, useFetch];\n});\n\n_c = List;\nconst PublicationList = withApiState(List);\n_c2 = PublicationList;\nexport default PublicationList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"List\");\n$RefreshReg$(_c2, \"PublicationList\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/PublicationList/PublicationList.jsx"],"names":["React","useState","Preview","deletePublications","useFetch","withApiState","toast","useLocation","useNavigate","List","apiState","publicationId","setPublicationId","navigate","location","console","log","takeId","id","success","state","fetchFunc","firstRenderCheck","initialValue","addProp","stopFirstRender","PublicationList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;;;AAEA,MAAMC,IAAI,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAMY,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAMM,QAAQ,GAAGP,WAAW,EAA5B,CAJ6B,CAIG;;AAChCQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAEA,QAAMG,MAAM,GAAGC,EAAE,IAAI;AACnBN,IAAAA,gBAAgB,CAACM,EAAD,CAAhB;AACAL,IAAAA,QAAQ,CAAC,CAAC,CAAF,CAAR;AACAP,IAAAA,KAAK,CAACa,OAAN,CAAc,8BAAd;AACD,GAJD;;AAOA,QAAM;AAAEC,IAAAA;AAAF,MAAYhB,QAAQ,CAAC;AACzBiB,IAAAA,SAAS,EAAElB,kBADc;AAEzBO,IAAAA,QAAQ,EAAEA,QAFe;AAGzBY,IAAAA,gBAAgB,EAAE,IAHO;AAIzBC,IAAAA,YAAY,EAAE,IAJW;AAKzBC,IAAAA,OAAO,EAAEb,aALgB;AAMzBc,IAAAA,eAAe,EAAE;AANQ,GAAD,CAA1B;AASA,sBACE;AAAA,2BACE,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEL,KAAnB;AAA0B,MAAA,OAAO,EAAEH;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMR,I;UAEaD,W,EAEAD,W,EAUCH,Q;;;KAddK,I;AA8BN,MAAMiB,eAAe,GAAGrB,YAAY,CAACI,IAAD,CAApC;MAAMiB,e;AAEN,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react';\nimport Preview from '../Preview';\n\nimport { deletePublications } from 'services/readerApi';\n\nimport { useFetch } from 'hooks';\nimport { withApiState } from 'services/ApiState';\nimport toast from 'react-hot-toast';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst List = ({ apiState }) => {\n  const [publicationId, setPublicationId] = useState(0);\n  const navigate = useNavigate();\n\n  const location = useLocation(); // - hook which returns object with url features (pathName, searchParams, hashes, etc...)\n  console.log(location);\n\n  const takeId = id => {\n    setPublicationId(id);\n    navigate(-1);\n    toast.success('Publication has been deleted');\n  };\n\n\n  const { state } = useFetch({\n    fetchFunc: deletePublications,\n    apiState: apiState,\n    firstRenderCheck: true,\n    initialValue: null,\n    addProp: publicationId,\n    stopFirstRender: false,\n  });\n\n  return (\n    <div>\n      <Preview newState={state} onClick={takeId} />\n    </div>\n  );\n};\n\nconst PublicationList = withApiState(List);\n\nexport default PublicationList;\n"]},"metadata":{},"sourceType":"module"}