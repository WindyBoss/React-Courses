{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/views/BooksView.jsx\",\n    _s = $RefreshSig$();\n\nimport { TextField } from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport { useFetch } from '../../src/Hooks/useFetch';\nimport { getBooks } from 'services/FetchApi';\nimport { withApiState } from 'services/ApiState';\nimport ListRender from 'components/ListRender';\nimport Pending from 'components/Pending';\nimport PageHeading from 'components/PageHeading';\nimport { useDebounce } from '../Hooks/useDebounced';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction BooksViewNoState(_ref) {\n  _s();\n\n  let {\n    apiState\n  } = _ref;\n  const fetchedBooks = useFetch(apiState, getBooks);\n  const [query, setQuery] = useDebounce(500, true); // custom hook that returns query string from URL\n\n  const [books, setBooks] = useState(null);\n  const searchQuery = query.get('query') ? query.get('query') : '';\n\n  const handleChange = e => {\n    console.log(e.target.value);\n    e.target.value !== '' ? setQuery({\n      query: e.target.value\n    }) : setQuery();\n  };\n\n  useEffect(() => {\n    setBooks(fetchedBooks && fetchedBooks.filter(book => book.title.includes(searchQuery)));\n  }, [fetchedBooks, searchQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeading, {\n      text: \"Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), apiState.isPending() && /*#__PURE__*/_jsxDEV(Pending, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 32\n    }, this), apiState.isSuccess() && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        onChange: handleChange,\n        label: \"find book\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), books && /*#__PURE__*/_jsxDEV(ListRender, {\n        list: books\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), apiState.isError() && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ops something went wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BooksViewNoState, \"oDrH0+sEDQiDFHcmfuWIDx5atjw=\", false, function () {\n  return [useFetch, useDebounce];\n});\n\n_c = BooksViewNoState;\nconst BooksView = withApiState(BooksViewNoState);\n_c2 = BooksView;\nexport default BooksView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BooksViewNoState\");\n$RefreshReg$(_c2, \"BooksView\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/views/BooksView.jsx"],"names":["TextField","useState","useEffect","useFetch","getBooks","withApiState","ListRender","Pending","PageHeading","useDebounce","BooksViewNoState","apiState","fetchedBooks","query","setQuery","books","setBooks","searchQuery","get","handleChange","e","console","log","target","value","filter","book","title","includes","isPending","isSuccess","isError","BooksView"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;;AAEA,SAASC,gBAAT,OAAwC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACtC,QAAMC,YAAY,GAAGT,QAAQ,CAACQ,QAAD,EAAWP,QAAX,CAA7B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBL,WAAW,CAAC,GAAD,EAAM,IAAN,CAArC,CAFsC,CAEY;;AAClD,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMgB,WAAW,GAAGJ,KAAK,CAACK,GAAN,CAAU,OAAV,IAAqBL,KAAK,CAACK,GAAN,CAAU,OAAV,CAArB,GAA0C,EAA9D;;AAEA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB;AACAJ,IAAAA,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAnB,GAAwBV,QAAQ,CAAC;AAAED,MAAAA,KAAK,EAAEO,CAAC,CAACG,MAAF,CAASC;AAAlB,KAAD,CAAhC,GAA8DV,QAAQ,EAAtE;AACD,GAHD;;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACJ,YAAY,IAAIA,YAAY,CAACa,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBX,WAApB,CAA5B,CAAjB,CAAR;AACD,GAFQ,EAEN,CAACL,YAAD,EAAeK,WAAf,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGN,QAAQ,CAACkB,SAAT,mBAAwB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAF3B,EAGGlB,QAAQ,CAACmB,SAAT,mBACC;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,QAAQ,EAAEX,YADZ;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,OAAO,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,cADF,EAMGJ,KAAK,iBAAI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,cANZ;AAAA,oBAJJ,EAaGJ,QAAQ,CAACoB,OAAT,mBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbzB;AAAA,kBADF;AAiBD;;GAjCQrB,gB;UACcP,Q,EACKM,W;;;KAFnBC,gB;AAkCT,MAAMsB,SAAS,GAAG3B,YAAY,CAACK,gBAAD,CAA9B;MAAMsB,S;AACN,eAAeA,SAAf","sourcesContent":["import { TextField } from '@mui/material';\nimport { useState, useEffect } from 'react';\n\nimport { useFetch } from '../../src/Hooks/useFetch';\nimport { getBooks } from 'services/FetchApi';\nimport { withApiState } from 'services/ApiState';\nimport ListRender from 'components/ListRender';\nimport Pending from 'components/Pending';\nimport PageHeading from 'components/PageHeading';\nimport { useDebounce } from '../Hooks/useDebounced';\n\nfunction BooksViewNoState({ apiState }) {\n  const fetchedBooks = useFetch(apiState, getBooks);\n  const [query, setQuery] = useDebounce(500, true); // custom hook that returns query string from URL\n  const [books, setBooks] = useState(null);\n\n  const searchQuery = query.get('query') ? query.get('query') : '';\n  \n  const handleChange = e => {\n    console.log(e.target.value);\n    e.target.value !== '' ? setQuery({ query: e.target.value }) : setQuery();\n  };\n\n  useEffect(() => {\n    setBooks(fetchedBooks && fetchedBooks.filter(book => book.title.includes(searchQuery)));\n  }, [fetchedBooks, searchQuery]);\n\n  return (\n    <>\n      <PageHeading text=\"Books\" />\n      {apiState.isPending() && <Pending />}\n      {apiState.isSuccess() && (\n        <>\n          <TextField\n            onChange={handleChange}\n            label=\"find book\"\n            variant=\"outlined\"\n          />\n          {books && <ListRender list={books} />}\n        </>\n      )}\n      {apiState.isError() && <p>Ops something went wrong</p>}\n    </>\n  );\n}\nconst BooksView = withApiState(BooksViewNoState);\nexport default BooksView;\n"]},"metadata":{},"sourceType":"module"}