{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'; // import axios from 'axios';\n\nexport const todoApi = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3004'\n  }),\n  tagTypes: ['Todos'],\n  endpoints: builder => ({\n    getTodos: builder.query({\n      query: () => '/todos',\n      transformResponse: res => res.sort((a, b) => b.name - a.name),\n      providesTags: ['Todos']\n    }),\n    addTodo: builder.mutation({\n      query: todo => ({\n        url: '/todos',\n        method: 'POST',\n        body: todo\n      }),\n      transformResponse: (response, meta, arg) => {\n        console.log(response);\n        return response.data;\n      },\n      invalidatesTags: ['Todos']\n    }),\n    updateTodo: builder.mutation({\n      query: todo => ({\n        url: `/todos/${todo.id}`,\n        method: 'PATCH',\n        body: { ...todo,\n          completed: !todo.completed\n        }\n      }),\n      invalidatesTags: ['Todos']\n    }),\n    deleteTodo: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/todos/${id}`,\n          method: 'DELETE',\n          body: id\n        };\n      },\n      invalidatesTags: ['Todos']\n    })\n  })\n});\nexport default todoApi.reducer;\nexport const {\n  useGetTodosQuery,\n  useAddTodoMutation,\n  useUpdateTodoMutation,\n  useDeleteTodoMutation\n} = todoApi; // export const getTodos = async() => {\n//     const { data } = await axios.get('http://localhost:3004/todos');\n//     return data;\n// };\n// export const postTodos = async todo => {\n//     const { data } = await axios.post('http://localhost:3004/todos', todo);\n//     return data;\n// };\n// export const deleteTodos = async todoId => {\n//     const { data } = await axios.delete('http://localhost:3004/todos', todoId);\n//     return data;\n// };","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/service/apiService.js"],"names":["createApi","fetchBaseQuery","todoApi","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getTodos","query","transformResponse","res","sort","a","b","name","providesTags","addTodo","mutation","todo","url","method","body","response","meta","arg","console","log","data","invalidatesTags","updateTodo","id","completed","deleteTodo","reducer","useGetTodosQuery","useAddTodoMutation","useUpdateTodoMutation","useDeleteTodoMutation"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C,C,CACA;;AAEA,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;AAC7BG,EAAAA,WAAW,EAAE,KADgB;AAE7BC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AAAEI,IAAAA,OAAO,EAAE;AAAX,GAAD,CAFI;AAG7BC,EAAAA,QAAQ,EAAE,CAAC,OAAD,CAHmB;AAI7BC,EAAAA,SAAS,EAAEC,OAAO,KAAK;AACnBC,IAAAA,QAAQ,EAAED,OAAO,CAACE,KAAR,CAAc;AACpBA,MAAAA,KAAK,EAAE,MAAM,QADO;AAEpBC,MAAAA,iBAAiB,EAAEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAA9B,CAFN;AAGpBC,MAAAA,YAAY,EAAE,CAAC,OAAD;AAHM,KAAd,CADS;AAMnBC,IAAAA,OAAO,EAAEV,OAAO,CAACW,QAAR,CAAiB;AACtBT,MAAAA,KAAK,EAAEU,IAAI,KAAK;AACZC,QAAAA,GAAG,EAAE,QADO;AAEZC,QAAAA,MAAM,EAAE,MAFI;AAGZC,QAAAA,IAAI,EAAEH;AAHM,OAAL,CADW;AAMtBT,MAAAA,iBAAiB,EAAE,CAACa,QAAD,EAAWC,IAAX,EAAiBC,GAAjB,KAAyB;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,eAAOA,QAAQ,CAACK,IAAhB;AACH,OATqB;AAUtBC,MAAAA,eAAe,EAAE,CAAC,OAAD;AAVK,KAAjB,CANU;AAkBnBC,IAAAA,UAAU,EAAEvB,OAAO,CAACW,QAAR,CAAiB;AACzBT,MAAAA,KAAK,EAAEU,IAAI,KAAK;AACZC,QAAAA,GAAG,EAAG,UAASD,IAAI,CAACY,EAAG,EADX;AAEZV,QAAAA,MAAM,EAAE,OAFI;AAGZC,QAAAA,IAAI,EAAE,EAAC,GAAGH,IAAJ;AAAUa,UAAAA,SAAS,EAAE,CAACb,IAAI,CAACa;AAA3B;AAHM,OAAL,CADc;AAMzBH,MAAAA,eAAe,EAAE,CAAC,OAAD;AANQ,KAAjB,CAlBO;AA0BnBI,IAAAA,UAAU,EAAE1B,OAAO,CAACW,QAAR,CAAiB;AACzBT,MAAAA,KAAK,EAAE;AAAA,YAAC;AAAEsB,UAAAA;AAAF,SAAD;AAAA,eAAa;AAChBX,UAAAA,GAAG,EAAG,UAASW,EAAG,EADF;AAEhBV,UAAAA,MAAM,EAAE,QAFQ;AAGhBC,UAAAA,IAAI,EAAES;AAHU,SAAb;AAAA,OADkB;AAMzBF,MAAAA,eAAe,EAAE,CAAC,OAAD;AANQ,KAAjB;AA1BO,GAAL;AAJW,CAAD,CAAzB;AAyCP,eAAe5B,OAAO,CAACiC,OAAvB;AAEA,OAAO,MAAM;AACTC,EAAAA,gBADS;AAETC,EAAAA,kBAFS;AAGTC,EAAAA,qBAHS;AAITC,EAAAA;AAJS,IAKTrC,OALG,C,CAOP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n// import axios from 'axios';\n\nexport const todoApi = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3004' }),\n    tagTypes: ['Todos'],\n    endpoints: builder => ({\n        getTodos: builder.query({\n            query: () => '/todos',\n            transformResponse: res => res.sort((a, b) => b.name - a.name),\n            providesTags: ['Todos'],\n        }),\n        addTodo: builder.mutation({\n            query: todo => ({\n                url: '/todos',\n                method: 'POST',\n                body: todo,\n            }),\n            transformResponse: (response, meta, arg) => {\n                console.log(response);\n                return response.data\n            },\n            invalidatesTags: ['Todos'],\n        }),\n        updateTodo: builder.mutation({\n            query: todo => ({\n                url: `/todos/${todo.id}`,\n                method: 'PATCH',\n                body: {...todo, completed: !todo.completed },\n            }),\n            invalidatesTags: ['Todos'],\n        }),\n        deleteTodo: builder.mutation({\n            query: ({ id }) => ({\n                url: `/todos/${id}`,\n                method: 'DELETE',\n                body: id,\n            }),\n            invalidatesTags: ['Todos'],\n        }),\n    }),\n});\n\nexport default todoApi.reducer;\n\nexport const {\n    useGetTodosQuery,\n    useAddTodoMutation,\n    useUpdateTodoMutation,\n    useDeleteTodoMutation,\n} = todoApi;\n\n// export const getTodos = async() => {\n//     const { data } = await axios.get('http://localhost:3004/todos');\n//     return data;\n// };\n\n// export const postTodos = async todo => {\n//     const { data } = await axios.post('http://localhost:3004/todos', todo);\n//     return data;\n// };\n\n// export const deleteTodos = async todoId => {\n//     const { data } = await axios.delete('http://localhost:3004/todos', todoId);\n//     return data;\n// };"]},"metadata":{},"sourceType":"module"}