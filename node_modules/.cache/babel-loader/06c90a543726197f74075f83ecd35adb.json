{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Appbar/Appbar.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport authContext from '../../context/authContext';\nimport { Layout } from '../Layout';\nimport UserMenu from '../../pages/UserMenu';\nimport Button from '@mui/material/Button';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { themeContext } from '../../context/authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(themeContext);\n/*\n* this Appbar is made by hook useContext, where all information is written in variable\n*/\n\nexport default function Appbar() {\n  _s();\n\n  const {\n    user,\n    isLoggedIn,\n    onLogIn,\n    onLogOut,\n    mainTheme,\n    changeTheme\n  } = useContext(authContext);\n  /*\n  * useContext can be used multiple time in on App\n  const x = useContext(qqq);\n  const user = useContext(xxx);\n  */\n\n  console.log(mainTheme);\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      colors: mainTheme,\n      onClick: changeTheme,\n      children: isLoggedIn ? /*#__PURE__*/_jsxDEV(UserMenu, {\n        onLogOut: onLogOut,\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-flex',\n          width: '250px',\n          padding: '10px',\n          margin: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            fontSize: '10px',\n            width: '100px',\n            marginRight: '15px'\n          },\n          variant: \"contained\",\n          endIcon: /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 116\n          }, this),\n          onClick: onLogIn,\n          type: \"button\",\n          children: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Appbar, \"rt+wRIAGcq/FKycaceyXyz0oQzg=\");\n\n_c = Appbar;\n;\n/*\n* this Appbar is made by using authContext.Consumer component, which made code less readable than by using hook useContext\n*/\n// export default function Appbar() {\n//   return (\n//     <authContext.Consumer>\n//       {({ user, isLoggedIn, onLogIn, onLogOut }) => (\n//         <header>\n//           <Layout>\n//           {isLoggedIn ? (\n//             <UserMenu onLogOut={onLogOut} user={user} />\n//           ) : (\n//             <div style={{ display: 'inline-flex', width: '250px', padding: '10px', margin: '20px' }}>\n//               <Button style={{ fontSize: '10px', width: '100px', marginRight: '15px' }} variant=\"contained\" endIcon={<PersonIcon />} onClick={onLogIn} type=\"button\">Log in</Button>\n//             </div>\n//             )}\n//           </Layout>\n//         </header>\n//       )}\n//     </authContext.Consumer>\n//   );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"Appbar\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Appbar/Appbar.jsx"],"names":["useContext","authContext","Layout","UserMenu","Button","PersonIcon","themeContext","console","log","Appbar","user","isLoggedIn","onLogIn","onLogOut","mainTheme","changeTheme","display","width","padding","margin","fontSize","marginRight"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AAEA,SAAQC,YAAR,QAA2B,2BAA3B;;AAEAC,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEA;AACA;AACA;;AACA,eAAe,SAASG,MAAT,GAAkB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA,SAAvC;AAAkDC,IAAAA;AAAlD,MAAkEf,UAAU,CAACC,WAAD,CAAlF;AAEA;AACF;AACA;AACA;AACA;;AAEEM,EAAAA,OAAO,CAACC,GAAR,CAAYM,SAAZ;AACA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,SAAhB;AAA2B,MAAA,OAAO,EAAEC,WAApC;AAAA,gBACGJ,UAAU,gBACT,QAAC,QAAD;AAAU,QAAA,QAAQ,EAAEE,QAApB;AAA8B,QAAA,IAAI,EAAEH;AAApC;AAAA;AAAA;AAAA;AAAA,cADS,gBAGT;AAAK,QAAA,KAAK,EAAE;AAAEM,UAAAA,OAAO,EAAE,aAAX;AAA0BC,UAAAA,KAAK,EAAE,OAAjC;AAA0CC,UAAAA,OAAO,EAAE,MAAnD;AAA2DC,UAAAA,MAAM,EAAE;AAAnE,SAAZ;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAEC,YAAAA,QAAQ,EAAE,MAAZ;AAAoBH,YAAAA,KAAK,EAAE,OAA3B;AAAoCI,YAAAA,WAAW,EAAE;AAAjD,WAAf;AAA0E,UAAA,OAAO,EAAC,WAAlF;AAA8F,UAAA,OAAO,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBAAvG;AAAuH,UAAA,OAAO,EAAET,OAAhI;AAAyI,UAAA,IAAI,EAAC,QAA9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAvBuBH,M;;KAAAA,M;AAuBvB;AAID;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {useContext} from 'react';\nimport authContext from '../../context/authContext';\nimport { Layout } from '../Layout';\nimport UserMenu from '../../pages/UserMenu';\nimport Button from '@mui/material/Button';\nimport PersonIcon from '@mui/icons-material/Person';\n\nimport {themeContext} from '../../context/authContext';\n\nconsole.log(themeContext);\n\n/*\n* this Appbar is made by hook useContext, where all information is written in variable\n*/\nexport default function Appbar() {\n  const { user, isLoggedIn, onLogIn, onLogOut, mainTheme, changeTheme } = useContext(authContext);\n\n  /*\n  * useContext can be used multiple time in on App\n  const x = useContext(qqq);\n  const user = useContext(xxx);\n  */\n  \n  console.log(mainTheme);\n  return (\n    <header>\n      <Layout colors={mainTheme} onClick={changeTheme}>\n        {isLoggedIn ? (\n          <UserMenu onLogOut={onLogOut} user={user} />\n        ) : (\n          <div style={{ display: 'inline-flex', width: '250px', padding: '10px', margin: '20px' }}>\n            <Button style={{ fontSize: '10px', width: '100px', marginRight: '15px' }} variant=\"contained\" endIcon={<PersonIcon />} onClick={onLogIn} type=\"button\">Log in</Button>\n          </div>\n        )}\n      </Layout>\n    </header>\n  );\n};\n\n\n\n/*\n* this Appbar is made by using authContext.Consumer component, which made code less readable than by using hook useContext\n*/\n\n// export default function Appbar() {\n//   return (\n//     <authContext.Consumer>\n//       {({ user, isLoggedIn, onLogIn, onLogOut }) => (\n//         <header>\n//           <Layout>\n//           {isLoggedIn ? (\n//             <UserMenu onLogOut={onLogOut} user={user} />\n//           ) : (\n//             <div style={{ display: 'inline-flex', width: '250px', padding: '10px', margin: '20px' }}>\n//               <Button style={{ fontSize: '10px', width: '100px', marginRight: '15px' }} variant=\"contained\" endIcon={<PersonIcon />} onClick={onLogIn} type=\"button\">Log in</Button>\n//             </div>\n//             )}\n//           </Layout>\n//         </header>\n//       )}\n//     </authContext.Consumer>\n//   );\n// };"]},"metadata":{},"sourceType":"module"}