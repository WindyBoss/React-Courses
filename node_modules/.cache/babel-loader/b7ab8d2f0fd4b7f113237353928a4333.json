{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/Reader/Reader.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Controls } from '../../common/components/Controls';\nimport { Progress } from '../../common/components/Progress';\nimport { TextWrapper } from '../../common/components/TextWrapper';\nimport { themeContext } from 'context/authContext';\nimport { useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Reader = _ref => {\n  _s();\n\n  let {\n    publications\n  } = _ref;\n  const {\n    mainTheme\n  } = useContext(themeContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const publicationId = searchParams.get('id'); // Search Params is used for recording the searching or filter query, \n  // which helps users to shares links with already made search or filter  \n\n  const publicationIdParsed = parseInt(publicationId);\n\n  const changeIndex = value => {\n    const publicationNumber = publications.length;\n\n    switch (publicationIdParsed + value) {\n      case publicationNumber:\n        setSearchParams({\n          id: 0\n        });\n        break;\n\n      case -1:\n        setSearchParams({\n          id: publicationNumber - 1\n        });\n        break;\n\n      default:\n        setSearchParams({\n          id: publicationIdParsed + value\n        });\n    }\n  };\n\n  useEffect(() => {\n    isNaN(publicationIdParsed) ? setSearchParams({\n      id: 0\n    }) : setSearchParams({\n      id: publicationIdParsed\n    });\n  }, [publicationIdParsed, setSearchParams]);\n  const currentPublication = !isNaN(publicationIdParsed) ? publications[publicationIdParsed] : publications[0];\n  return /*#__PURE__*/_jsxDEV(ProgressContainer, {\n    onClick: changeIndex,\n    colors: mainTheme.colors,\n    currentIndex: publicationIdParsed,\n    currentPublication: currentPublication,\n    totalPublications: publications.length\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reader, \"AOA35TJKhoAPsbJznlw+5ZUDUj8=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Reader;\nReader.propTypes = {\n  publications: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })).isRequired\n};\n\nconst ProgressContainer = _ref2 => {\n  let {\n    onClick,\n    colors,\n    currentIndex,\n    currentPublication,\n    totalPublications\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        marginTop: '30px',\n        justifyContent: 'center',\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Controls, {\n        onClick: onClick,\n        colors: colors,\n        children: /*#__PURE__*/_jsxDEV(Progress, {\n          colors: colors,\n          current: currentIndex,\n          total: totalPublications\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextWrapper, {\n      publication: currentPublication,\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = ProgressContainer;\nexport default Reader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Reader\");\n$RefreshReg$(_c2, \"ProgressContainer\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/Reader/Reader.jsx"],"names":["React","useContext","useEffect","PropTypes","Controls","Progress","TextWrapper","themeContext","useSearchParams","Reader","publications","mainTheme","searchParams","setSearchParams","publicationId","get","publicationIdParsed","parseInt","changeIndex","value","publicationNumber","length","id","isNaN","currentPublication","colors","propTypes","arrayOf","shape","text","string","isRequired","title","ProgressContainer","onClick","currentIndex","totalPublications","width","marginTop","justifyContent","display","alignItems"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Controls } from '../../common/components/Controls';\nimport { Progress } from '../../common/components/Progress';\nimport { TextWrapper } from '../../common/components/TextWrapper';\n\nimport { themeContext } from 'context/authContext';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Reader = ({ publications }) => {\n  const { mainTheme } = useContext(themeContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const publicationId = searchParams.get('id'); \n  // Search Params is used for recording the searching or filter query, \n  // which helps users to shares links with already made search or filter  \n  const publicationIdParsed = parseInt(publicationId);\n\n  const changeIndex = value => {\n    const publicationNumber = publications.length;\n\n    switch (publicationIdParsed + value) {\n      case publicationNumber:\n        setSearchParams({ id: 0 });\n        break;\n      case -1:\n        setSearchParams({ id: publicationNumber - 1 });\n        break;\n      default:\n        setSearchParams({ id: publicationIdParsed + value });\n    }\n  };\n\n  useEffect(() => {\n    isNaN(publicationIdParsed) ? setSearchParams({ id: 0 }) :\n    setSearchParams({ id: publicationIdParsed });\n  }, [publicationIdParsed, setSearchParams]);\n\n  const currentPublication = !isNaN(publicationIdParsed)\n    ? publications[publicationIdParsed]\n    : publications[0];\n\n  return (\n    <ProgressContainer\n      onClick={changeIndex}\n      colors={mainTheme.colors}\n      currentIndex={publicationIdParsed}\n      currentPublication={currentPublication}\n      totalPublications={publications.length}\n    />\n  );\n};\n\nReader.propTypes = {\n  publications: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nconst ProgressContainer = ({\n  onClick,\n  colors,\n  currentIndex,\n  currentPublication,\n  totalPublications,\n}) => {\n  return (\n    <>\n      <div\n        style={{\n          width: '100%',\n          marginTop: '30px',\n          justifyContent: 'center',\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <Controls onClick={onClick} colors={colors}>\n          <Progress\n            colors={colors}\n            current={currentIndex}\n            total={totalPublications}\n          />\n        </Controls>\n      </div>\n      <TextWrapper publication={currentPublication} colors={colors} />\n    </>\n  );\n};\n\n\nexport default Reader;"]},"metadata":{},"sourceType":"module"}