{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Counter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport Button from '@mui/material/Button';\nimport { themeContext } from \"context/authContext\";\nimport { ButtonStyled } from \"components/globalStyles\";\nimport { CounterContainer, BtnContainer, TotalClickCounter, MainContainer } from '../components/Counter/Counter.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CounterClass extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      counterA: 0,\n      counterB: 0\n    };\n\n    this.handleCounterAIncrement = () => {\n      this.setState(_ref => {\n        let {\n          counterA\n        } = _ref;\n        return {\n          counterA: counterA + 1\n        };\n      });\n    };\n\n    this.handleCounterBIncrement = () => {\n      this.setState(_ref2 => {\n        let {\n          counterB\n        } = _ref2;\n        return {\n          counterB: counterB + 1\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      counterA,\n      counterB\n    } = this.state;\n    const totalClick = counterB + counterA;\n    document.title = `Total click ${totalClick}`;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      counterA,\n      counterB\n    } = this.state;\n\n    if (prevState.counterA !== counterA || prevState.counterB !== counterB) {\n      const totalClick = counterB + counterA;\n      document.title = `Total click ${totalClick}`;\n    }\n  }\n\n  render() {\n    const {\n      counterA,\n      counterB\n    } = this.state;\n    const totalClick = counterB + counterA;\n    return /*#__PURE__*/_jsxDEV(themeContext.Consumer, {\n      children: _ref3 => {\n        let {\n          mainTheme\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(BtnContainer, {\n          children: [/*#__PURE__*/_jsxDEV(ButtonStyled, {\n            colors: mainTheme.colors,\n            endIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 60\n            }, this),\n            onClick: this.handleCounterAIncrement,\n            children: [\"Counter A \", counterA, \" Clicks\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TotalClickCounter, {\n            children: totalClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ButtonStyled, {\n            colors: mainTheme.colors,\n            endIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 60\n            }, this),\n            onClick: this.handleCounterAIncrement,\n            children: [\"Counter B \", counterB, \" Clicks\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\n\nfunction CounterHooks() {\n  _s();\n\n  const [counterA, setCounterA] = useState(0);\n  const [counterB, setCounterB] = useState(0);\n\n  const handleCounterAIncrement = () => {\n    setCounterA(prevCounterA => prevCounterA + 1);\n  };\n\n  const handleCounterBIncrement = () => {\n    setCounterB(prevCounterB => prevCounterB + 1);\n  };\n  /*\n  * useEffect - is a hook, which is used to perform side-effects in the component, instead of componentDidMount, componentWillUnmount, componentDidUpdate\n  * you can have as namy use effects as you want\n  ------------------------------------------------------------------------------------------------------*/\n\n\n  useEffect(() => {\n    document.title = `Total click ${counterB + counterA}`;\n  }, [counterA, counterB]);\n  /*\n  * useEffect - here use effect is used as componentDidUpdate, when parameter in array (CounterA, CounterB) is changed\n  */\n\n  useEffect(() => {\n    console.log(`Console log with Variables`);\n  }, [counterA, counterB]);\n  /*\n  * useEffect - here use effect is used as componentDidMount, when the array is empty\n  */\n\n  useEffect(() => {\n    console.log(`Console log with Empty Array`);\n  }, []);\n  /*\n  * useEffect - here use effect is used as componentDidUpdate, react for any changes\n  */\n\n  useEffect(() => {\n    console.log(`Console log without Array`);\n  });\n  /*\n  * useEffect on condition (is better to use if inside of useEffect, when you want to fetch data from server inside of useEffect\n  * on other render than the first one, or on some conditions)\n  */\n\n  useEffect(() => {\n    if (counterA > 100) {\n      fetch();\n    }\n  }, [counterA]);\n  const totalClick = counterB + counterA;\n  return /*#__PURE__*/_jsxDEV(themeContext.Consumer, {\n    children: _ref4 => {\n      let {\n        mainTheme\n      } = _ref4;\n      return /*#__PURE__*/_jsxDEV(BtnContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ButtonStyled, {\n          colors: mainTheme.colors,\n          endIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 60\n          }, this),\n          onClick: this.handleCounterAIncrement,\n          children: [\"Counter A \", counterA, \" Clicks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TotalClickCounter, {\n          children: totalClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ButtonStyled, {\n          colors: mainTheme.colors,\n          endIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 58\n          }, this),\n          onClick: this.handleCounterAIncrement,\n          children: [\"Counter B \", counterB, \" Clicks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CounterHooks, \"l0JS7R0yVb+AyFKVYkhSCOmCQQY=\");\n\n_c = CounterHooks;\n;\nexport default function CounterPage() {\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(CounterContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"CounterClass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterClass, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CounterContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"CounterHooks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterHooks, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_c2 = CounterPage;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CounterHooks\");\n$RefreshReg$(_c2, \"CounterPage\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Counter.jsx"],"names":["React","Component","useState","useEffect","ArrowUpwardIcon","Button","themeContext","ButtonStyled","CounterContainer","BtnContainer","TotalClickCounter","MainContainer","CounterClass","state","counterA","counterB","handleCounterAIncrement","setState","handleCounterBIncrement","componentDidMount","totalClick","document","title","componentDidUpdate","prevProps","prevState","render","mainTheme","colors","CounterHooks","setCounterA","setCounterB","prevCounterA","prevCounterB","console","log","fetch","CounterPage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,EAAyCC,iBAAzC,EAA4DC,aAA5D,QAAiF,sCAAjF;;;AAEA,MAAMC,YAAN,SAA2BX,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCY,KADmC,GAC3B;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAD2B;;AAAA,SAMnCC,uBANmC,GAMT,MAAM;AAC9B,WAAKC,QAAL,CAAc;AAAA,YAAC;AAAEH,UAAAA;AAAF,SAAD;AAAA,eAAmB;AAAEA,UAAAA,QAAQ,EAAEA,QAAQ,GAAG;AAAvB,SAAnB;AAAA,OAAd;AACD,KARkC;;AAAA,SAUnCI,uBAVmC,GAUT,MAAM;AAC9B,WAAKD,QAAL,CAAc;AAAA,YAAC;AAAEF,UAAAA;AAAF,SAAD;AAAA,eAAmB;AAAEA,UAAAA,QAAQ,EAAEA,QAAQ,GAAG;AAAvB,SAAnB;AAAA,OAAd;AACD,KAZkC;AAAA;;AAcnCI,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyB,KAAKF,KAApC;AACA,UAAMO,UAAU,GAAGL,QAAQ,GAAGD,QAA9B;AACAO,IAAAA,QAAQ,CAACC,KAAT,GAAkB,eAAcF,UAAW,EAA3C;AACD;;AAEDG,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,UAAM;AAAEX,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyB,KAAKF,KAApC;;AAEA,QAAIY,SAAS,CAACX,QAAV,KAAuBA,QAAvB,IAAmCW,SAAS,CAACV,QAAV,KAAuBA,QAA9D,EAAwE;AACtE,YAAMK,UAAU,GAAGL,QAAQ,GAAGD,QAA9B;AACAO,MAAAA,QAAQ,CAACC,KAAT,GAAkB,eAAcF,UAAW,EAA3C;AACD;AACF;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyB,KAAKF,KAApC;AACA,UAAMO,UAAU,GAAGL,QAAQ,GAAGD,QAA9B;AACA,wBACE,QAAC,YAAD,CAAc,QAAd;AAAA,gBACC;AAAA,YAAC;AAACa,UAAAA;AAAD,SAAD;AAAA,4BACC,QAAC,YAAD;AAAA,kCACE,QAAC,YAAD;AAAc,YAAA,MAAM,EAAEA,SAAS,CAACC,MAAhC;AAAwC,YAAA,OAAO,eAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,oBAAjD;AAAsE,YAAA,OAAO,EAAE,KAAKZ,uBAApF;AAAA,qCACaF,QADb;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,iBAAD;AAAA,sBAAoBM;AAApB;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,YAAD;AAAc,YAAA,MAAM,EAAEO,SAAS,CAACC,MAAhC;AAAwC,YAAA,OAAO,eAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,oBAAjD;AAAsE,YAAA,OAAO,EAAE,KAAKZ,uBAApF;AAAA,qCACaD,QADb;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA/CkC;;AAgDpC;;AAED,SAASc,YAAT,GAAyB;AAAA;;AACvB,QAAM,CAACf,QAAD,EAAWgB,WAAX,IAA0B5B,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWgB,WAAX,IAA0B7B,QAAQ,CAAC,CAAD,CAAxC;;AAEA,QAAMc,uBAAuB,GAAG,MAAM;AACpCc,IAAAA,WAAW,CAACE,YAAY,IAAIA,YAAY,GAAG,CAAhC,CAAX;AACD,GAFD;;AAIA,QAAMd,uBAAuB,GAAG,MAAM;AACpCa,IAAAA,WAAW,CAACE,YAAY,IAAIA,YAAY,GAAG,CAAhC,CAAX;AACD,GAFD;AAIA;AACF;AACA;AACA;;;AAEE9B,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,QAAQ,CAACC,KAAT,GAAkB,eAAcP,QAAQ,GAAGD,QAAS,EAApD;AACD,GAFQ,EAEN,CAACA,QAAD,EAAWC,QAAX,CAFM,CAAT;AAIA;AACF;AACA;;AAEEZ,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,OAAO,CAACC,GAAR,CAAa,4BAAb;AACD,GAFQ,EAEN,CAACrB,QAAD,EAAWC,QAAX,CAFM,CAAT;AAIA;AACF;AACA;;AAEEZ,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,OAAO,CAACC,GAAR,CAAa,8BAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAKA;AACF;AACA;;AACEhC,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,OAAO,CAACC,GAAR,CAAa,2BAAb;AACD,GAFQ,CAAT;AAIA;AACF;AACA;AACA;;AACEhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,GAAG,GAAf,EAAoB;AAClBsB,MAAAA,KAAK;AACN;AACF,GAJQ,EAIN,CAACtB,QAAD,CAJM,CAAT;AAMA,QAAMM,UAAU,GAAGL,QAAQ,GAAGD,QAA9B;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAA,cACC;AAAA,UAAC;AAACa,QAAAA;AAAD,OAAD;AAAA,0BACC,QAAC,YAAD;AAAA,gCACI,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEA,SAAS,CAACC,MAAhC;AAAwC,UAAA,OAAO,eAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,kBAAjD;AAAsE,UAAA,OAAO,EAAE,KAAKZ,uBAApF;AAAA,mCACWF,QADX;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAIE,QAAC,iBAAD;AAAA,oBAAoBM;AAApB;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEO,SAAS,CAACC,MAAhC;AAAwC,UAAA,OAAO,eAAE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,kBAAjD;AAAsE,UAAA,OAAO,EAAE,KAAKZ,uBAApF;AAAA,mCACaD,QADb;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAxEQc,Y;;KAAAA,Y;AAwER;AAGD,eAAe,SAASQ,WAAT,GAAuB;AACpC,sBACE,QAAC,aAAD;AAAA,4BACE,QAAC,gBAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,gBAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;MAbuBA,W;AAavB","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport Button from '@mui/material/Button';\n\nimport { themeContext } from \"context/authContext\";\n\nimport { ButtonStyled } from \"components/globalStyles\";\n\nimport { CounterContainer, BtnContainer, TotalClickCounter, MainContainer } from '../components/Counter/Counter.styled';\n\nclass CounterClass extends Component {\n  state = {\n    counterA: 0,\n    counterB: 0\n  }\n\n  handleCounterAIncrement = () => {\n    this.setState(({ counterA }) => ({ counterA: counterA + 1 }));\n  };\n\n  handleCounterBIncrement = () => {\n    this.setState(({ counterB }) => ({ counterB: counterB + 1 }));\n  };\n\n  componentDidMount() {\n    const { counterA, counterB } = this.state;\n    const totalClick = counterB + counterA;\n    document.title = `Total click ${totalClick}`;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { counterA, counterB } = this.state;\n\n    if (prevState.counterA !== counterA || prevState.counterB !== counterB) {\n      const totalClick = counterB + counterA;\n      document.title = `Total click ${totalClick}`;\n    }\n  }\n\n  render() {\n    const { counterA, counterB } = this.state;\n    const totalClick = counterB + counterA;\n    return (\n      <themeContext.Consumer>\n      {({mainTheme}) => (  \n        <BtnContainer>\n          <ButtonStyled colors={mainTheme.colors} endIcon={<ArrowUpwardIcon />} onClick={this.handleCounterAIncrement}>\n            Counter A {counterA} Clicks\n          </ButtonStyled>\n          <TotalClickCounter>{totalClick}</TotalClickCounter>\n          <ButtonStyled colors={mainTheme.colors} endIcon={<ArrowUpwardIcon />} onClick={this.handleCounterAIncrement}>\n            Counter B {counterB} Clicks\n            </ButtonStyled>\n        </BtnContainer>\n      )}\n      </themeContext.Consumer>      \n    );\n  };\n};\n\nfunction CounterHooks () {\n  const [counterA, setCounterA] = useState(0);\n  const [counterB, setCounterB] = useState(0);\n\n  const handleCounterAIncrement = () => {\n    setCounterA(prevCounterA => prevCounterA + 1);\n  };\n\n  const handleCounterBIncrement = () => {\n    setCounterB(prevCounterB => prevCounterB + 1);\n  };\n\n  /*\n  * useEffect - is a hook, which is used to perform side-effects in the component, instead of componentDidMount, componentWillUnmount, componentDidUpdate\n  * you can have as namy use effects as you want\n  ------------------------------------------------------------------------------------------------------*/\n\n  useEffect(() => {\n    document.title = `Total click ${counterB + counterA}`;\n  }, [counterA, counterB]);\n\n  /*\n  * useEffect - here use effect is used as componentDidUpdate, when parameter in array (CounterA, CounterB) is changed\n  */\n\n  useEffect(() => {\n    console.log(`Console log with Variables`);\n  }, [counterA, counterB]);\n\n  /*\n  * useEffect - here use effect is used as componentDidMount, when the array is empty\n  */\n\n  useEffect(() => {\n    console.log(`Console log with Empty Array`);\n  }, []);\n\n\n  /*\n  * useEffect - here use effect is used as componentDidUpdate, react for any changes\n  */\n  useEffect(() => {\n    console.log(`Console log without Array`);\n  });\n\n  /*\n  * useEffect on condition (is better to use if inside of useEffect, when you want to fetch data from server inside of useEffect\n  * on other render than the first one, or on some conditions)\n  */\n  useEffect(() => {\n    if (counterA > 100) {\n      fetch();\n    }\n  }, [counterA]);\n\n  const totalClick = counterB + counterA;\n\n  return (\n    <themeContext.Consumer>\n    {({mainTheme}) => (\n      <BtnContainer>\n          <ButtonStyled colors={mainTheme.colors} endIcon={<ArrowUpwardIcon />} onClick={this.handleCounterAIncrement}>\n          Counter A {counterA} Clicks\n          </ButtonStyled>\n        <TotalClickCounter>{totalClick}</TotalClickCounter>\n        <ButtonStyled colors={mainTheme.colors} endIcon={<ArrowUpwardIcon />} onClick={this.handleCounterAIncrement}>\n          Counter B {counterB} Clicks\n          </ButtonStyled>\n      </BtnContainer>\n      )}\n    </themeContext.Consumer>      \n  );\n};\n\n\nexport default function CounterPage() {\n  return (\n    <MainContainer>\n      <CounterContainer>\n        <p>CounterClass</p>\n        <CounterClass />\n      </CounterContainer>\n      <CounterContainer>\n        <p>CounterHooks</p>\n        <CounterHooks />\n      </CounterContainer>\n    </MainContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}