{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Reader/Controls.jsx\";\nimport { Button } from './Reader.styled';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Controls(_ref) {\n  let {\n    onClick,\n    colors,\n    children // index,\n    // publicationsLength\n\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      colors: colors,\n      onClick: () => onClick(-1)\n      /*\n      * disabled={index === 0} // -> in that way react puts conditions to DOM element\n      */\n      ,\n      type: \"button\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), children, /*#__PURE__*/_jsxDEV(Button, {\n      colors: colors,\n      onClick: () => onClick(1)\n      /*\n      * disabled={index + 1 === publicationsLength} // -> in that way react puts conditions to DOM element\n      */\n      ,\n      type: \"button\",\n      children: \"Front\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = Controls;\n;\nControls.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired,\n  children: PropTypes.any.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Controls\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Reader/Controls.jsx"],"names":["Button","PropTypes","Controls","onClick","colors","children","propTypes","func","isRequired","objectOf","string","any"],"mappings":";AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,OAAO,SAASC,QAAT,OAMJ;AAAA,MANsB;AACvBC,IAAAA,OADuB;AAEvBC,IAAAA,MAFuB;AAGvBC,IAAAA,QAHuB,CAIvB;AACA;;AALuB,GAMtB;AACD,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,MAAM,EAAED,MADV;AAEE,MAAA,OAAO,EAAE,MAAMD,OAAO,CAAC,CAAC,CAAF;AACtB;AACR;AACA;AALM;AAME,MAAA,IAAI,EAAC,QANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAWGE,QAXH,eAaE,QAAC,MAAD;AACE,MAAA,MAAM,EAAED,MADV;AAEE,MAAA,OAAO,EAAE,MAAMD,OAAO,CAAC,CAAD;AACtB;AACR;AACA;AALM;AAME,MAAA,IAAI,EAAC,QANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA,kBADF;AAyBD;KAhCeD,Q;AAgCf;AAEDA,QAAQ,CAACI,SAAT,GAAqB;AACnBH,EAAAA,OAAO,EAAEF,SAAS,CAACM,IAAV,CAAeC,UADL;AAEnBJ,EAAAA,MAAM,EAAEH,SAAS,CAACQ,QAAV,CAAmBR,SAAS,CAACS,MAA7B,EAAqCF,UAF1B;AAGnBH,EAAAA,QAAQ,EAAEJ,SAAS,CAACU,GAAV,CAAcH;AAHL,CAArB","sourcesContent":["import { Button } from './Reader.styled';\nimport PropTypes from 'prop-types';\n\nexport function Controls({\n  onClick,\n  colors,\n  children,\n  // index,\n  // publicationsLength\n}) {\n  return (\n    <>\n      <Button\n        colors={colors}\n        onClick={() => onClick(-1)}\n        /*\n        * disabled={index === 0} // -> in that way react puts conditions to DOM element\n        */\n        type='button'>\n        Back\n      </Button>\n\n      {children}\n\n      <Button\n        colors={colors}\n        onClick={() => onClick(1)}\n        /*\n        * disabled={index + 1 === publicationsLength} // -> in that way react puts conditions to DOM element\n        */\n        type='button'>\n        Front\n      </Button>\n    </>\n  );\n};\n\nControls.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired,\n  children: PropTypes.any.isRequired,\n};"]},"metadata":{},"sourceType":"module"}