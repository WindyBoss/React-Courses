{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport todos from 'data/todos.json';\nimport { nanoid } from 'nanoid';\n\nfunction addTodoPrepare(data) {\n  if (!data) {\n    return {\n      payload: {}\n    };\n  }\n\n  const {\n    name,\n    description,\n    deadline,\n    priority\n  } = data;\n  return {\n    payload: {\n      name: name,\n      deadline: deadline,\n      description: description,\n      id: nanoid(),\n      completed: false,\n      priority: priority\n    }\n  };\n}\n\nexport const todoSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    todos: [...todos],\n    filter: ''\n  },\n  reducers: {\n    addTodo: (state, _ref, addTodoPrepare) => {\n      let {\n        payload\n      } = _ref;\n      state.todos.push(payload);\n    },\n    deleteTodo: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return { ...state,\n        todos: [...state.todos.filter(_ref3 => {\n          let {\n            id\n          } = _ref3;\n          return id !== payload;\n        })]\n      };\n    },\n    toggleTodo: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return { ...state,\n        todos: [...state.todos.map(todo => todo.id === payload ? { ...todo,\n          completed: !todo.completed\n        } : todo)]\n      };\n    },\n    setFilter: (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      return state.filter = payload;\n    }\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n  setFilter\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoSlice.js"],"names":["createSlice","todos","nanoid","addTodoPrepare","data","payload","name","description","deadline","priority","id","completed","todoSlice","initialState","filter","reducers","addTodo","state","push","deleteTodo","toggleTodo","map","todo","setFilter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,MAAI,CAACA,IAAL,EAAW;AACP,WAAO;AACHC,MAAAA,OAAO,EAAE;AADN,KAAP;AAGH;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAA4CL,IAAlD;AACA,SAAO;AACHC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAEA,IADD;AAELE,MAAAA,QAAQ,EAAEA,QAFL;AAGLD,MAAAA,WAAW,EAAEA,WAHR;AAILG,MAAAA,EAAE,EAAER,MAAM,EAJL;AAKLS,MAAAA,SAAS,EAAE,KALN;AAMLF,MAAAA,QAAQ,EAAEA;AANL;AADN,GAAP;AAUH;;AAED,OAAO,MAAMG,SAAS,GAAGZ,WAAW,CAAC;AACjCM,EAAAA,IAAI,EAAE,OAD2B;AAEjCO,EAAAA,YAAY,EAAE;AAAEZ,IAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,CAAT;AAAqBa,IAAAA,MAAM,EAAE;AAA7B,GAFmB;AAGjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,CAACC,KAAD,QAAqBd,cAArB,KAAwC;AAAA,UAAhC;AAAEE,QAAAA;AAAF,OAAgC;AAC7CY,MAAAA,KAAK,CAAChB,KAAN,CAAYiB,IAAZ,CAAiBb,OAAjB;AACH,KAHK;AAKNc,IAAAA,UAAU,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEZ,QAAAA;AAAF,OAAgB;AAChC,aAAO,EACH,GAAGY,KADA;AAEHhB,QAAAA,KAAK,EAAE,CAAC,GAAGgB,KAAK,CAAChB,KAAN,CAAYa,MAAZ,CAAmB;AAAA,cAAC;AAAEJ,YAAAA;AAAF,WAAD;AAAA,iBAAYA,EAAE,KAAKL,OAAnB;AAAA,SAAnB,CAAJ;AAFJ,OAAP;AAIH,KAVK;AAYNe,IAAAA,UAAU,EAAE,CAACH,KAAD,YAAwB;AAAA,UAAhB;AAAEZ,QAAAA;AAAF,OAAgB;AAChC,aAAO,EACH,GAAGY,KADA;AAEHhB,QAAAA,KAAK,EAAE,CACH,GAAGgB,KAAK,CAAChB,KAAN,CAAYoB,GAAZ,CAAgBC,IAAI,IACnBA,IAAI,CAACZ,EAAL,KAAYL,OAAZ,GAAsB,EAAC,GAAGiB,IAAJ;AAAUX,UAAAA,SAAS,EAAE,CAACW,IAAI,CAACX;AAA3B,SAAtB,GAA+DW,IADhE,CADA;AAFJ,OAAP;AAQH,KArBK;AAuBNC,IAAAA,SAAS,EAAE,CAACN,KAAD;AAAA,UAAQ;AAAEZ,QAAAA;AAAF,OAAR;AAAA,aAAyBY,KAAK,CAACH,MAAN,GAAeT,OAAxC;AAAA;AAvBL;AAHuB,CAAD,CAA7B;AA8BP,OAAO,MAAM;AAAEW,EAAAA,OAAF;AAAWG,EAAAA,UAAX;AAAuBC,EAAAA,UAAvB;AAAmCG,EAAAA;AAAnC,IAAiDX,SAAS,CAACY,OAAjE;AAEP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport todos from 'data/todos.json';\nimport { nanoid } from 'nanoid';\n\nfunction addTodoPrepare(data) {\n    if (!data) {\n        return {\n            payload: {},\n        };\n    }\n\n    const { name, description, deadline, priority } = data;\n    return {\n        payload: {\n            name: name,\n            deadline: deadline,\n            description: description,\n            id: nanoid(),\n            completed: false,\n            priority: priority,\n        },\n    };\n}\n\nexport const todoSlice = createSlice({\n    name: 'todos',\n    initialState: { todos: [...todos], filter: '' },\n    reducers: {\n        addTodo: (state, { payload }, addTodoPrepare) => {\n            state.todos.push(payload);\n        },\n\n        deleteTodo: (state, { payload }) => {\n            return {\n                ...state,\n                todos: [...state.todos.filter(({ id }) => id !== payload)],\n            };\n        },\n\n        toggleTodo: (state, { payload }) => {\n            return {\n                ...state,\n                todos: [\n                    ...state.todos.map(todo =>\n                        todo.id === payload ? {...todo, completed: !todo.completed } : todo\n                    ),\n                ],\n            };\n        },\n\n        setFilter: (state, { payload }) => (state.filter = payload),\n    },\n});\n\nexport const { addTodo, deleteTodo, toggleTodo, setFilter } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}