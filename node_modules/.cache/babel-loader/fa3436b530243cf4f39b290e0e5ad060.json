{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\nexport const btnStyles = (_ref, hover) => {\n  let {\n    btnTextColor,\n    btnBgColor,\n    btnBorderColor,\n    hoverBtnColor,\n    hoverBtnBgColor\n  } = _ref;\n  return {\n    color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`,\n    backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n    border: `1px solid ${btnBorderColor}`,\n    transform: !hover ? 'scale(1)' : 'scale(1.1)'\n  };\n};\nexport function ButtonStyled(_ref2) {\n  _s();\n\n  let {\n    children,\n    onClick,\n    colors,\n    endIcon,\n    type,\n    disabled,\n    btnBgColor,\n    addFeat\n  } = _ref2;\n  const [hover, setHover] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    style: btnBgColor ? { ...addFeat,\n      ...btnStyles(colors, hover),\n      color: btnBgColor,\n      backgroundColor: '#b2b276'\n    } : { ...addFeat,\n      ...btnStyles(colors, hover)\n    },\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    onClick: onClick,\n    variant: \"contained\",\n    type: type,\n    endIcon: endIcon,\n    disabled: disabled,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ButtonStyled, \"bRXmKus9fOZFlca/6zXTYU+twGY=\");\n\n_c = ButtonStyled;\n;\nexport const fieldStyles = (_ref3, hover) => {\n  let {\n    btnTextColor,\n    btnBgColor,\n    btnBorderColor,\n    hoverBtnColor,\n    hoverBtnBgColor\n  } = _ref3;\n  return {\n    color: !hover ? `${btnTextColor}` : `white`,\n    backgroundColor: !hover ? `${btnBgColor}` : `transparent`,\n    border: !hover ? `1px solid ${btnBorderColor}` : `1px solid transparent`,\n    fill: !hover ? `${btnTextColor}` : `transparent`\n  };\n};\nexport function TextFieldStyled(_ref4) {\n  _s2();\n\n  let {\n    value,\n    onChange,\n    colors,\n    label,\n    variant,\n    size,\n    type,\n    id,\n    hoverColor,\n    focused\n  } = _ref4;\n  const [hover, setHover] = useState(false);\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    style: fieldStyles(colors, hover),\n    onFocus: () => setHover(true),\n    onBlur: () => setHover(false),\n    type: type,\n    value: value,\n    label: label,\n    variant: variant,\n    size: size,\n    id: id,\n    onChange: onChange,\n    color: hoverColor,\n    focused: focused\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TextFieldStyled, \"bRXmKus9fOZFlca/6zXTYU+twGY=\");\n\n_c2 = TextFieldStyled;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonStyled\");\n$RefreshReg$(_c2, \"TextFieldStyled\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx"],"names":["createGlobalStyle","Button","useState","TextField","GlobalStyle","props","theme","colors","globalBgColor","btnStyles","hover","btnTextColor","btnBgColor","btnBorderColor","hoverBtnColor","hoverBtnBgColor","color","backgroundColor","border","transform","ButtonStyled","children","onClick","endIcon","type","disabled","addFeat","setHover","fieldStyles","fill","TextFieldStyled","value","onChange","label","variant","size","id","hoverColor","focused"],"mappings":"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","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\n\nexport const btnStyles = ({btnTextColor, btnBgColor, btnBorderColor, hoverBtnColor, hoverBtnBgColor}, hover) => {\n    return (\n      {\n        color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`, \n        backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n        border: `1px solid ${btnBorderColor}`,\n        transform: !hover ? 'scale(1)' : 'scale(1.1)'\n      }\n    );\n};\n\nexport function ButtonStyled ({\n  children, \n  onClick, \n  colors, \n  endIcon, \n  type, \n  disabled, \n  btnBgColor, \n  addFeat\n}) {\n   const [hover, setHover] = useState(false);  \n   return (\n    <Button\n      style={ btnBgColor ? {...addFeat, ...btnStyles(colors, hover), color: btnBgColor, backgroundColor: '#b2b276'} : {...addFeat, ...btnStyles(colors, hover)}}\n      onPointerOver={()=> setHover(true)}\n      onPointerOut={() => setHover(false)}\n      onClick={onClick}\n      variant=\"contained\" \n      type={type}\n      endIcon={endIcon}\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  )\n};\n\nexport const fieldStyles = ({btnTextColor, btnBgColor, btnBorderColor, hoverBtnColor, hoverBtnBgColor}, hover) => {\n  return (\n    {\n      color: !hover ? `${btnTextColor}` : `white`, \n      backgroundColor: !hover ? `${btnBgColor}` : `transparent`,\n      border: !hover ? `1px solid ${btnBorderColor}` : `1px solid transparent`,\n      fill: !hover ? `${btnTextColor}` : `transparent`, \n    }\n  );\n};\n\nexport function TextFieldStyled ({ \n  value, \n  onChange, \n  colors, \n  label, \n  variant, \n  size, \n  type, \n  id, \n  hoverColor,\n  focused\n}) {\n  const [hover, setHover] = useState(false);  \n  return (\n    <TextField\n      style={(fieldStyles(colors, hover))}\n      onFocus={()=> setHover(true)}\n      onBlur={() => setHover(false)}\n      type={type}\n      value={value}\n      label={label}\n      variant={variant}\n      size={size}\n      id={id}\n      onChange={onChange}\n      color={hoverColor}\n      focused={focused}\n    />\n  )\n}"]},"metadata":{},"sourceType":"module"}