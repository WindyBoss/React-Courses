{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit'; // import { addTodo, deleteTodo, toggleTodo } from './todoActions';\n\nimport { fetchTodoRequest, fetchTodoSuccess, fetchTodoError, addTodoRequest, addTodoSuccess, addTodoError, deleteTodoRequest, deleteTodoSuccess, deleteTodoError, toggleCompleteRequest, toggleCompleteSuccess, toggleCompleteError } from './todoActions';\n/*\n* reducer with builder Example\n export const todoReducer = createReducer(initialState, builder => {\n    builder\n        .addCase(addTodo, (state, { payload }) => {\n            state.push(payload);\n        })\n        .addCase(deleteTodo, (state, { payload }) => [\n            ...state.filter(({ id }) => id !== payload),\n        ])\n        .addCase(toggleTodo, (state, { payload }) =>\n            state.map(todo =>\n                todo.id === payload ? {...todo, completed: !todo.completed } : todo\n            )\n        )\n        .addDefaultCase(state => {\n            return state;\n        });\n});\n*/\n\nexport const todoReducer = createReducer({\n  todos: []\n}, {\n  [addTodoSuccess]: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    state.todos.push(payload);\n  },\n  [deleteTodoSuccess]: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    return {\n      todos: [...state.todos.filter(_ref3 => {\n        let {\n          id\n        } = _ref3;\n        return id !== payload;\n      })]\n    };\n  },\n  [toggleCompleteSuccess]: (state, _ref4) => {\n    let {\n      payload\n    } = _ref4;\n    return {\n      todos: [...state.todos.map(todo => todo.id === payload ? { ...todo,\n        completed: !todo.completed\n      } : todo)]\n    };\n  }\n});\nexport const loading = createReducer(false, {\n  [addTodoRequest]: () => true,\n  [addTodoSuccess]: () => false,\n  [addTodoError]: () => false,\n  [fetchTodoRequest]: () => true,\n  [fetchTodoSuccess]: () => false,\n  [fetchTodoError]: () => false,\n  [deleteTodoRequest]: () => true,\n  [deleteTodoSuccess]: () => false,\n  [deleteTodoError]: () => false,\n  [toggleCompleteRequest]: () => true,\n  [toggleCompleteSuccess]: () => false,\n  [toggleCompleteError]: () => false\n});\n/*\n\n* reducer without REST API\nexport const todoReducer = createReducer({ todos: [] }, {\n    [addTodo]: (state, { payload }) => {\n        state.todos.push(payload);\n    },\n    [deleteTodo]: (state, { payload }) => {\n        return { todos: [...state.todos.filter(({ id }) => id !== payload)] };\n    },\n    [toggleTodo]: (state, { payload }) => {\n        return {\n            todos: [\n                ...state.todos.map(todo =>\n                    todo.id === payload ? {...todo, completed: !todo.completed } : todo\n                ),\n            ],\n        };\n    },\n});\n\nexport { addTodo, deleteTodo, toggleTodo };\n\n*/","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoReducer.js"],"names":["createReducer","fetchTodoRequest","fetchTodoSuccess","fetchTodoError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompleteRequest","toggleCompleteSuccess","toggleCompleteError","todoReducer","todos","state","payload","push","filter","id","map","todo","completed","loading"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B,C,CACA;;AAEA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,iBAPJ,EAQIC,iBARJ,EASIC,eATJ,EAUIC,qBAVJ,EAWIC,qBAXJ,EAYIC,mBAZJ,QAaO,eAbP;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGb,aAAa,CAAC;AAAEc,EAAAA,KAAK,EAAE;AAAT,CAAD,EAAgB;AACpD,GAACT,cAAD,GAAkB,CAACU,KAAD,WAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AACtCD,IAAAA,KAAK,CAACD,KAAN,CAAYG,IAAZ,CAAiBD,OAAjB;AACH,GAHmD;AAIpD,GAACR,iBAAD,GAAqB,CAACO,KAAD,YAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AACzC,WAAO;AAAEF,MAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAN,CAAYI,MAAZ,CAAmB;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKH,OAAnB;AAAA,OAAnB,CAAJ;AAAT,KAAP;AACH,GANmD;AAOpD,GAACL,qBAAD,GAAyB,CAACI,KAAD,YAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AAC7C,WAAO;AACHF,MAAAA,KAAK,EAAE,CACH,GAAGC,KAAK,CAACD,KAAN,CAAYM,GAAZ,CAAgBC,IAAI,IACnBA,IAAI,CAACF,EAAL,KAAYH,OAAZ,GAAsB,EAAC,GAAGK,IAAJ;AAAUC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,OAAtB,GAA+DD,IADhE,CADA;AADJ,KAAP;AAOH;AAfmD,CAAhB,CAAjC;AAkBP,OAAO,MAAME,OAAO,GAAGvB,aAAa,CAAC,KAAD,EAAQ;AACxC,GAACI,cAAD,GAAkB,MAAM,IADgB;AAExC,GAACC,cAAD,GAAkB,MAAM,KAFgB;AAGxC,GAACC,YAAD,GAAgB,MAAM,KAHkB;AAIxC,GAACL,gBAAD,GAAoB,MAAM,IAJc;AAKxC,GAACC,gBAAD,GAAoB,MAAM,KALc;AAMxC,GAACC,cAAD,GAAkB,MAAM,KANgB;AAOxC,GAACI,iBAAD,GAAqB,MAAM,IAPa;AAQxC,GAACC,iBAAD,GAAqB,MAAM,KARa;AASxC,GAACC,eAAD,GAAmB,MAAM,KATe;AAUxC,GAACC,qBAAD,GAAyB,MAAM,IAVS;AAWxC,GAACC,qBAAD,GAAyB,MAAM,KAXS;AAYxC,GAACC,mBAAD,GAAuB,MAAM;AAZW,CAAR,CAA7B;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\n// import { addTodo, deleteTodo, toggleTodo } from './todoActions';\n\nimport {\n    fetchTodoRequest,\n    fetchTodoSuccess,\n    fetchTodoError,\n    addTodoRequest,\n    addTodoSuccess,\n    addTodoError,\n    deleteTodoRequest,\n    deleteTodoSuccess,\n    deleteTodoError,\n    toggleCompleteRequest,\n    toggleCompleteSuccess,\n    toggleCompleteError,\n} from './todoActions';\n\n/*\n* reducer with builder Example\n export const todoReducer = createReducer(initialState, builder => {\n    builder\n        .addCase(addTodo, (state, { payload }) => {\n            state.push(payload);\n        })\n        .addCase(deleteTodo, (state, { payload }) => [\n            ...state.filter(({ id }) => id !== payload),\n        ])\n        .addCase(toggleTodo, (state, { payload }) =>\n            state.map(todo =>\n                todo.id === payload ? {...todo, completed: !todo.completed } : todo\n            )\n        )\n        .addDefaultCase(state => {\n            return state;\n        });\n});\n*/\n\nexport const todoReducer = createReducer({ todos: [] }, {\n    [addTodoSuccess]: (state, { payload }) => {\n        state.todos.push(payload);\n    },\n    [deleteTodoSuccess]: (state, { payload }) => {\n        return { todos: [...state.todos.filter(({ id }) => id !== payload)] };\n    },\n    [toggleCompleteSuccess]: (state, { payload }) => {\n        return {\n            todos: [\n                ...state.todos.map(todo =>\n                    todo.id === payload ? {...todo, completed: !todo.completed } : todo\n                ),\n            ],\n        };\n    },\n});\n\nexport const loading = createReducer(false, {\n    [addTodoRequest]: () => true,\n    [addTodoSuccess]: () => false,\n    [addTodoError]: () => false,\n    [fetchTodoRequest]: () => true,\n    [fetchTodoSuccess]: () => false,\n    [fetchTodoError]: () => false,\n    [deleteTodoRequest]: () => true,\n    [deleteTodoSuccess]: () => false,\n    [deleteTodoError]: () => false,\n    [toggleCompleteRequest]: () => true,\n    [toggleCompleteSuccess]: () => false,\n    [toggleCompleteError]: () => false,\n});\n\n/*\n\n* reducer without REST API\nexport const todoReducer = createReducer({ todos: [] }, {\n    [addTodo]: (state, { payload }) => {\n        state.todos.push(payload);\n    },\n    [deleteTodo]: (state, { payload }) => {\n        return { todos: [...state.todos.filter(({ id }) => id !== payload)] };\n    },\n    [toggleTodo]: (state, { payload }) => {\n        return {\n            todos: [\n                ...state.todos.map(todo =>\n                    todo.id === payload ? {...todo, completed: !todo.completed } : todo\n                ),\n            ],\n        };\n    },\n});\n\nexport { addTodo, deleteTodo, toggleTodo };\n\n*/"]},"metadata":{},"sourceType":"module"}