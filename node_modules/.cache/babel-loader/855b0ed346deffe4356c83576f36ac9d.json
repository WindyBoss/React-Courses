{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useMemo } from 'react';\nimport authContext from './authContext';\nimport themeContext from './authContext';\nimport PropTypes from 'prop-types';\nimport theme from '../theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Provider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [mainTheme, setMainTheme] = useState(theme.light);\n\n  const changeTheme = () => {\n    if (mainTheme === theme.dark) {\n      setMainTheme(theme.light);\n    }\n\n    if (mainTheme === theme.light) {\n      setMainTheme(theme.dark);\n    }\n  };\n\n  const onLogIn = () => {\n    setUser({\n      name: 'Mango'\n    });\n    setIsLoggedIn(true);\n  };\n\n  const onLogOut = () => {\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n  /*\n   * useMemo - is a hook, which is used to memoize the value of a function, and only re-render when the function arguments change,\n   * or the function itself returns a different value, or the function is called for the first time, or the function is called with different arguments.\n   */\n\n\n  const provideTheme = useMemo(() => {\n    return {\n      mainTheme,\n      changeTheme\n    };\n  });\n  const providerValue = useMemo(() => {\n    return {\n      user,\n      isLoggedIn,\n      onLogIn,\n      onLogOut,\n      mainTheme,\n      changeTheme\n    };\n  }, [isLoggedIn, user, mainTheme, changeTheme]);\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: providerValue,\n    children: [\" \", children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 14\n  }, this);\n}\n\n_s(Provider, \"vKIxwiK78b0xvr3F2ZWvpRJuMU4=\");\n\n_c = Provider;\n;\nProvider.propTypes = {\n  children: PropTypes.any.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/context/Provider.js"],"names":["useState","useMemo","authContext","themeContext","PropTypes","theme","Provider","children","user","setUser","isLoggedIn","setIsLoggedIn","mainTheme","setMainTheme","light","changeTheme","dark","onLogIn","name","onLogOut","provideTheme","providerValue","propTypes","any","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;;AAGA,eAAe,SAASC,QAAT,OAAgC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACK,KAAK,CAACS,KAAP,CAA1C;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAIH,SAAS,KAAKP,KAAK,CAACW,IAAxB,EAA8B;AAC1BH,MAAAA,YAAY,CAACR,KAAK,CAACS,KAAP,CAAZ;AACH;;AACD,QAAIF,SAAS,KAAKP,KAAK,CAACS,KAAxB,EAA+B;AAC3BD,MAAAA,YAAY,CAACR,KAAK,CAACW,IAAP,CAAZ;AACH;AACJ,GAPD;;AASA,QAAMC,OAAO,GAAG,MAAM;AAClBR,IAAAA,OAAO,CAAC;AAAES,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAP;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GAHD;;AAKA,QAAMQ,QAAQ,GAAG,MAAM;AACnBV,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;AAKA;AACJ;AACA;AACA;;;AAEI,QAAMS,YAAY,GAAGnB,OAAO,CAAC,MAAM;AAC/B,WAAO;AAAEW,MAAAA,SAAF;AAAaG,MAAAA;AAAb,KAAP;AACH,GAF2B,CAA5B;AAIA,QAAMM,aAAa,GAAGpB,OAAO,CAAC,MAAM;AAChC,WAAO;AAAEO,MAAAA,IAAF;AAAQE,MAAAA,UAAR;AAAoBO,MAAAA,OAApB;AAA6BE,MAAAA,QAA7B;AAAuCP,MAAAA,SAAvC;AAAkDG,MAAAA;AAAlD,KAAP;AACH,GAF4B,EAE1B,CAACL,UAAD,EAAaF,IAAb,EAAmBI,SAAnB,EAA8BG,WAA9B,CAF0B,CAA7B;AAIA,sBAAS,QACL,WADK,CACO,QADP;AACgB,IAAA,KAAK,EACtBM,aAFC;AAAA,oBAGCd,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAMH;;GA3CuBD,Q;;KAAAA,Q;AA2CvB;AAEDA,QAAQ,CAACgB,SAAT,GAAqB;AACjBf,EAAAA,QAAQ,EAAEH,SAAS,CAACmB,GAAV,CAAcC;AADP,CAArB","sourcesContent":["import { useState, useMemo } from 'react';\nimport authContext from './authContext';\nimport themeContext from './authContext';\nimport PropTypes from 'prop-types';\n\nimport theme from '../theme';\n\n\nexport default function Provider({ children }) {\n    const [user, setUser] = useState(null);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [mainTheme, setMainTheme] = useState(theme.light);\n\n    const changeTheme = () => {\n        if (mainTheme === theme.dark) {\n            setMainTheme(theme.light);\n        }\n        if (mainTheme === theme.light) {\n            setMainTheme(theme.dark);\n        }\n    };\n\n    const onLogIn = () => {\n        setUser({ name: 'Mango' });\n        setIsLoggedIn(true);\n    };\n\n    const onLogOut = () => {\n        setUser(null);\n        setIsLoggedIn(false);\n    };\n\n    /*\n     * useMemo - is a hook, which is used to memoize the value of a function, and only re-render when the function arguments change,\n     * or the function itself returns a different value, or the function is called for the first time, or the function is called with different arguments.\n     */\n\n    const provideTheme = useMemo(() => {\n        return { mainTheme, changeTheme }\n    })\n\n    const providerValue = useMemo(() => {\n        return { user, isLoggedIn, onLogIn, onLogOut, mainTheme, changeTheme };\n    }, [isLoggedIn, user, mainTheme, changeTheme]);\n\n    return ( <\n        authContext.Provider value = {\n            providerValue\n        } > { children } <\n        /authContext.Provider>\n    )\n};\n\nProvider.propTypes = {\n    children: PropTypes.any.isRequired,\n};"]},"metadata":{},"sourceType":"module"}