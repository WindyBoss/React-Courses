{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Player/Player.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledPlayer, PlayerPlace, LoaderText } from './Player.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Player(_ref) {\n  _s();\n\n  let {\n    url,\n    colors\n  } = _ref;\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  useEffect(() => {\n    setIsVideoLoaded(false);\n  }, [url]);\n  const showLoader = url && !isVideoLoaded;\n  const playerWidth = isVideoLoaded ? '100%' : 0;\n  const playerHeight = isVideoLoaded ? '100%' : 0;\n  return /*#__PURE__*/_jsxDEV(PlayerPlace, {\n    colors: colors,\n    children: [showLoader && /*#__PURE__*/_jsxDEV(LoaderText, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 24\n    }, this), url && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(StyledPlayer, {\n        url: url,\n        width: playerWidth,\n        height: playerHeight,\n        onReady: () => setIsVideoLoaded(true),\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Player, \"64zAvrCAxQK1SoL7QMk0lcDsX9o=\");\n\n_c = Player;\n;\nPlayer.propTypes = {\n  url: PropTypes.string,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Player/Player.jsx"],"names":["useState","useEffect","PropTypes","StyledPlayer","PlayerPlace","LoaderText","Player","url","colors","isVideoLoaded","setIsVideoLoaded","showLoader","playerWidth","playerHeight","propTypes","string","objectOf","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,UAApC,QAAsD,iBAAtD;;;AAEA,OAAO,SAASC,MAAT,OAAkC;AAAA;;AAAA,MAAjB;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAiB;AACrC,QAAM,CAAEC,aAAF,EAAiBC,gBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AAEFC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAFQ,EAEN,CAACH,GAAD,CAFM,CAAT;AAIE,QAAMI,UAAU,GAAGJ,GAAG,IAAI,CAACE,aAA3B;AACA,QAAMG,WAAW,GAAGH,aAAa,GAAG,MAAH,GAAY,CAA7C;AACA,QAAMI,YAAY,GAAGJ,aAAa,GAAG,MAAH,GAAY,CAA9C;AAEA,sBACE,QAAC,WAAD;AAAc,IAAA,MAAM,EAAED,MAAtB;AAAA,eACGG,UAAU,iBAAI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADjB,EAEGJ,GAAG,iBACF;AAAA,6BACE,QAAC,YAAD;AACE,QAAA,GAAG,EAAEA,GADP;AAEE,QAAA,KAAK,EAAEK,WAFT;AAGE,QAAA,MAAM,EAAEC,YAHV;AAIE,QAAA,OAAO,EAAE,MAAMH,gBAAgB,CAAC,IAAD,CAJjC;AAKE,QAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA;AADF,qBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBH;;GA3BeJ,M;;KAAAA,M;AA2Bf;AAEDA,MAAM,CAACQ,SAAP,GAAmB;AACjBP,EAAAA,GAAG,EAAEL,SAAS,CAACa,MADE;AAEjBP,EAAAA,MAAM,EAAEN,SAAS,CAACc,QAAV,CAAmBd,SAAS,CAACa,MAA7B,EAAqCE;AAF5B,CAAnB","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { StyledPlayer, PlayerPlace, LoaderText } from './Player.styled';\n\nexport function Player ({ url, colors }) {\n    const [ isVideoLoaded, setIsVideoLoaded ] = useState(false);\n\n  useEffect(() => {\n    setIsVideoLoaded(false);\n  }, [url])\n\n    const showLoader = url && !isVideoLoaded;\n    const playerWidth = isVideoLoaded ? '100%' : 0;\n    const playerHeight = isVideoLoaded ? '100%' : 0;\n\n    return (\n      <PlayerPlace  colors={colors}>\n        {showLoader && <LoaderText>Loading...</LoaderText>}\n        {url && (\n          <>\n            <StyledPlayer\n              url={url}\n              width={playerWidth}\n              height={playerHeight}\n              onReady={() => setIsVideoLoaded(true)}\n              controls\n            />\n          </>\n        )}\n      </PlayerPlace>\n    );\n};\n\nPlayer.propTypes = {\n  url: PropTypes.string,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired,\n};"]},"metadata":{},"sourceType":"module"}