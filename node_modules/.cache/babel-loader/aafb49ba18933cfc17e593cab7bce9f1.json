{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nfunction addTodoPrepare(data) {\n  if (!data) {\n    return {\n      payload: {}\n    };\n  }\n\n  const {\n    name,\n    description,\n    deadline,\n    priority\n  } = data;\n  return {\n    payload: {\n      name: name,\n      deadline: deadline,\n      description: description,\n      id: nanoid(),\n      completed: false,\n      priority: priority\n    }\n  };\n}\n\nconst addTodo = createAction('todos/addTodo', addTodoPrepare);\nconst deleteTodo = createAction('todos/deleteTodo');\nconst toggleTodo = createAction('todos/toggleTodo');\nconst filterTodo = createAction('todos/filterTodo');\n/*\n\n! ---------------------------------------------------------------- Notes ----------------------------------------------------------------------\n\n! ---------------------------------------------------------------- Redux ----------------------------------------------------------------------\n\n* Redux - library used for global state management in the case of high level of complication of global state.\n\n^ Main concept: Creation of global store - wrap of all application, which will collect all data and can provide it to all components.\nIs used usually when global state is complicated (like, theme, user data, and other data which, can be necessary in a lot of different components)\n\n& Main elements:\n1. Store,\n2. Reducers - functions, created for individual state update,\n3. Actions - user actions, presented as object with features type (name of action) & payload (the result of action), \n4. Store Provider - The same wrap as BrowserRouter\n\n! ---------------------------------------------------------------- Store ----------------------------------------------------------------------\n\n^ Created with functions createStore (vanilla Redux) or configureStore (Redux Toolkit).\n\n& Main elements of Store: \n1. Reducer - combination of all reducers (created by one of combineReducers functions)\n2. middleware - middleware function, which is used for additional configurations (for ex. logger - which shows all action in console)\n3. devTools - bool - param of store, responsible for presence of redux developer tools in browser\n4. preloadedState - store state before loading (some variable)\n5. enhancers - additional callback functions, which is called during state update\n\n? example: \n~ const store = configureStore({\n    reducer: persistedReducer,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({\n            serializableCheck: {\n                ^ ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], -- the code force code to ignore actions, for mistake preventing \n            },\n        }).concat(logger),\n    ^ devTools: process.env.NODE_ENV !== 'production', -- the code command webpack not to add devTools to production mode\n    enhancers: defaultEnhancers => {\n        console.log(defaultEnhancers);\n        return defaultEnhancers;\n    },\n});\n\n! ---------------------------------------------------------------- Reducer ----------------------------------------------------------------------\n\nReducer - function for redux state update\n\nCreated with function createReducer. \n\nThere are 2 types of reducers structure: \n\n1. builder \n? Example:\n  ~  export const todoReducer = createReducer(initialState, builder => {\n    builder\n        .addCase(addTodo, (state, { payload }) => {\n            state.push(payload);\n        })\n});\n\n\n2. inline actions \n? Example:\n ~ export const todoReducer = createReducer(initialState, {\n    [addTodo]: (state, { payload }) => {\n        state.push(payload);\n    },\n});\n\n\n! ---------------------------------------------------------------- Redux Toolkit --------------------------------------------------------------\n\nRedux Toolkit - bigger abstraction of redux where all redux magic is hidden in simplifier behind the code\n\nFunctions of redux\n\n* addTodo - redux action used for initializing the action made by user during the work with complicated global state with library Redux,\nand it this case Redux Toolkit package\n\n! ----------------------------------------------------- action console log ------------------------------------------------------------\n\n& console.log(\n  addTodo({\n    deadline: 'tomorrow',\n    description: 'no',\n    name: 'no name',\n    priority: 'high',\n  })\n);\n\n* Always will the object with features 'type' & 'payload'\n\n--  Type - name of our action \n--  payload - the result of action\n\nIn this case was used action prepare function, which already possessed the features: \n1. id (generated by nanoid)\n2. completed: false (by default)\n\n{\n    \"type\": \"todos/addTodo\",\n    \"payload\": {\n        \"name\": \"no name\",\n        \"deadline\": \"tomorrow\",\n        \"description\": \"no\",\n        \"id\": \"1nUQuIsc0x91OmZWQixy3\",\n        \"completed\": false,\n        \"priority\": \"high\"\n    }\n}\n*/\n\nexport { addTodo, deleteTodo, toggleTodo, filterTodo };","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoActions.js"],"names":["createAction","nanoid","addTodoPrepare","data","payload","name","description","deadline","priority","id","completed","addTodo","deleteTodo","toggleTodo","filterTodo"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,MAAI,CAACA,IAAL,EAAW;AACP,WAAO;AACHC,MAAAA,OAAO,EAAE;AADN,KAAP;AAGH;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAA4CL,IAAlD;AACA,SAAO;AACHC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAEA,IADD;AAELE,MAAAA,QAAQ,EAAEA,QAFL;AAGLD,MAAAA,WAAW,EAAEA,WAHR;AAILG,MAAAA,EAAE,EAAER,MAAM,EAJL;AAKLS,MAAAA,SAAS,EAAE,KALN;AAMLF,MAAAA,QAAQ,EAAEA;AANL;AADN,GAAP;AAUH;;AAED,MAAMG,OAAO,GAAGX,YAAY,CAAC,eAAD,EAAkBE,cAAlB,CAA5B;AACA,MAAMU,UAAU,GAAGZ,YAAY,CAAC,kBAAD,CAA/B;AACA,MAAMa,UAAU,GAAGb,YAAY,CAAC,kBAAD,CAA/B;AACA,MAAMc,UAAU,GAAGd,YAAY,CAAC,kkBC,UAAlB,EAA8BC,UAA9B,EAA0CC,UAA1C","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nfunction addTodoPrepare(data) {\n    if (!data) {\n        return {\n            payload: {},\n        };\n    }\n\n    const { name, description, deadline, priority } = data;\n    return {\n        payload: {\n            name: name,\n            deadline: deadline,\n            description: description,\n            id: nanoid(),\n            completed: false,\n            priority: priority,\n        },\n    };\n}\n\nconst addTodo = createAction('todos/addTodo', addTodoPrepare);\nconst deleteTodo = createAction('todos/deleteTodo');\nconst toggleTodo = createAction('todos/toggleTodo');\nconst filterTodo = createAction('todos/filterTodo');\n\n/*\n\n! ---------------------------------------------------------------- Notes ----------------------------------------------------------------------\n\n! ---------------------------------------------------------------- Redux ----------------------------------------------------------------------\n\n* Redux - library used for global state management in the case of high level of complication of global state.\n\n^ Main concept: Creation of global store - wrap of all application, which will collect all data and can provide it to all components.\nIs used usually when global state is complicated (like, theme, user data, and other data which, can be necessary in a lot of different components)\n\n& Main elements:\n1. Store,\n2. Reducers - functions, created for individual state update,\n3. Actions - user actions, presented as object with features type (name of action) & payload (the result of action), \n4. Store Provider - The same wrap as BrowserRouter\n\n! ---------------------------------------------------------------- Store ----------------------------------------------------------------------\n\n^ Created with functions createStore (vanilla Redux) or configureStore (Redux Toolkit).\n\n& Main elements of Store: \n1. Reducer - combination of all reducers (created by one of combineReducers functions)\n2. middleware - middleware function, which is used for additional configurations (for ex. logger - which shows all action in console)\n3. devTools - bool - param of store, responsible for presence of redux developer tools in browser\n4. preloadedState - store state before loading (some variable)\n5. enhancers - additional callback functions, which is called during state update\n\n? example: \n~ const store = configureStore({\n    reducer: persistedReducer,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({\n            serializableCheck: {\n                ^ ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], -- the code force code to ignore actions, for mistake preventing \n            },\n        }).concat(logger),\n    ^ devTools: process.env.NODE_ENV !== 'production', -- the code command webpack not to add devTools to production mode\n    enhancers: defaultEnhancers => {\n        console.log(defaultEnhancers);\n        return defaultEnhancers;\n    },\n});\n\n! ---------------------------------------------------------------- Reducer ----------------------------------------------------------------------\n\nReducer - function for redux state update\n\nCreated with function createReducer. \n\nThere are 2 types of reducers structure: \n\n1. builder \n? Example:\n  ~  export const todoReducer = createReducer(initialState, builder => {\n    builder\n        .addCase(addTodo, (state, { payload }) => {\n            state.push(payload);\n        })\n});\n\n\n2. inline actions \n? Example:\n ~ export const todoReducer = createReducer(initialState, {\n    [addTodo]: (state, { payload }) => {\n        state.push(payload);\n    },\n});\n\n\n! ---------------------------------------------------------------- Redux Toolkit --------------------------------------------------------------\n\nRedux Toolkit - bigger abstraction of redux where all redux magic is hidden in simplifier behind the code\n\nFunctions of redux\n\n* addTodo - redux action used for initializing the action made by user during the work with complicated global state with library Redux,\nand it this case Redux Toolkit package\n\n! ----------------------------------------------------- action console log ------------------------------------------------------------\n\n& console.log(\n  addTodo({\n    deadline: 'tomorrow',\n    description: 'no',\n    name: 'no name',\n    priority: 'high',\n  })\n);\n\n* Always will the object with features 'type' & 'payload'\n\n--  Type - name of our action \n--  payload - the result of action\n\nIn this case was used action prepare function, which already possessed the features: \n1. id (generated by nanoid)\n2. completed: false (by default)\n\n{\n    \"type\": \"todos/addTodo\",\n    \"payload\": {\n        \"name\": \"no name\",\n        \"deadline\": \"tomorrow\",\n        \"description\": \"no\",\n        \"id\": \"1nUQuIsc0x91OmZWQixy3\",\n        \"completed\": false,\n        \"priority\": \"high\"\n    }\n}\n*/\n\nexport { addTodo, deleteTodo, toggleTodo, filterTodo };"]},"metadata":{},"sourceType":"module"}