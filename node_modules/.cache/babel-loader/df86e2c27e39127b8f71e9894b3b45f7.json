{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Clock.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport { Clocki } from '../components/Clock/Clocki';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ClockClass extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      time: new Date()\n    };\n    this.intervalId = null;\n\n    this.stop = () => {\n      clearInterval(this.intervalId);\n    };\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      this.setState({\n        time: new Date()\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Clocki, {\n        time: this.state.time,\n        text: \"Current Time By Class\",\n        onClick: this.stop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\n;\n\nfunction ClockHooks() {\n  _s();\n\n  const [time, setTime] = useState(() => new Date());\n  /*\n  * useRef - is a hook, which helps to create a reference to an element, which will be hold in the memory (usually, it's a DOM element),\n  * and can be used in other places, where it couldn't be used before\n  */\n\n  const intervalId = useRef(null);\n  const buttonRef = useRef(null);\n  useEffect(() => {\n    intervalId.current = setInterval(() => {\n      setTime(new Date());\n      console.log('This is interval for every second');\n    }, 1000);\n    /*\n    * useEffect - here use effect is used as componentWillUnmount\n    */\n\n    return () => {\n      console.log('This before every useEffect');\n      stop();\n    };\n  }, []);\n\n  const stop = () => {\n    clearInterval(intervalId.current);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Clocki, {\n      time: time,\n      text: \"Current Time By Hooks\",\n      onClick: stop,\n      refferer: buttonRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ClockHooks, \"7m5lzs3styiO15rUFcNFRwdru0A=\");\n\n_c = ClockHooks;\n;\nexport function Clock() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ClockHooks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClockClass, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = Clock;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ClockHooks\");\n$RefreshReg$(_c2, \"Clock\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Clock.jsx"],"names":["React","Component","useState","useEffect","useRef","Clocki","ClockClass","state","time","Date","intervalId","stop","clearInterval","componentDidMount","setInterval","setState","componentWillUnmount","render","ClockHooks","setTime","buttonRef","current","console","log","Clock"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,MAAhD,QAA8D,OAA9D;AACA,SAASC,MAAT,QAAuB,4BAAvB;;;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADA,KADyB;AAAA,SAKjCC,UALiC,GAKpB,IALoB;;AAAA,SAiBjCC,IAjBiC,GAiB1B,MAAM;AACXC,MAAAA,aAAa,CAAC,KAAKF,UAAN,CAAb;AACD,KAnBgC;AAAA;;AAOjCG,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,UAAL,GAAkBI,WAAW,CAAC,MAAM;AAClC,WAAKC,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAR,OAAd;AACD,KAF4B,EAE1B,IAF0B,CAA7B;AAGD;;AAEDO,EAAAA,oBAAoB,GAAG;AACrB,SAAKL,IAAL;AACD;;AAMDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BAAE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWC,IAAzB;AAA+B,QAAA,IAAI,EAAC,uBAApC;AAA4D,QAAA,OAAO,EAAE,KAAKG;AAA1E;AAAA;AAAA;AAAA;AAAA;AAAF,qBADF;AAGD;;AAzBgC;;AA0BlC;;AAED,SAASO,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACV,IAAD,EAAOW,OAAP,IAAkBjB,QAAQ,CAAC,MAAM,IAAIO,IAAJ,EAAP,CAAhC;AAEA;AACF;AACA;AACA;;AACE,QAAMC,UAAU,GAAGN,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMgB,SAAS,GAAGhB,MAAM,CAAC,IAAD,CAAxB;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU,CAACW,OAAX,GAAqBP,WAAW,CAAC,MAAM;AACrCK,MAAAA,OAAO,CAAC,IAAIV,IAAJ,EAAD,CAAP;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,KAH+B,EAG7B,IAH6B,CAAhC;AAKF;AACF;AACA;;AACI,WAAO,MAAM;AACXD,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAZ,MAAAA,IAAI;AACL,KAHD;AAID,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMA,IAAI,GAAG,MAAM;AACjBC,IAAAA,aAAa,CAACF,UAAU,CAACW,OAAZ,CAAb;AACD,GAFD;;AAIA,sBACE;AAAA,2BAAE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEb,IAAd;AAAoB,MAAA,IAAI,EAAC,uBAAzB;AAAiD,MAAA,OAAO,EAAEG,IAA1D;AAAgE,MAAA,QAAQ,EAAES;AAA1E;AAAA;AAAA;AAAA;AAAA;AAAF,mBADF;AAGD;;GAjCQF,U;;KAAAA,U;AAiCR;AAED,OAAO,SAASM,KAAT,GAAiB;AACtB,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;MAPeA,K;AAOf","sourcesContent":["import React, { Component, useState, useEffect, useRef } from 'react';\nimport { Clocki } from '../components/Clock/Clocki';\n\nclass ClockClass extends Component {\n  state = {\n    time: new Date(),\n  };\n\n  intervalId = null;\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      this.setState({ time: new Date() });\n    }, 1000);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n  };\n\n  stop = () => {\n    clearInterval(this.intervalId);\n  };\n\n  render() {\n    return (\n      <><Clocki time={this.state.time} text='Current Time By Class' onClick={this.stop}/></>\n    );\n  };\n};\n\nfunction ClockHooks() {\n  const [time, setTime] = useState(() => new Date());\n\n  /*\n  * useRef - is a hook, which helps to create a reference to an element, which will be hold in the memory (usually, it's a DOM element),\n  * and can be used in other places, where it couldn't be used before\n  */\n  const intervalId = useRef(null);\n  const buttonRef = useRef(null);\n\n\n  useEffect(() => {\n    intervalId.current = setInterval(() => {\n      setTime(new Date());\n      console.log('This is interval for every second');\n    }, 1000);\n\n  /*\n  * useEffect - here use effect is used as componentWillUnmount\n  */\n    return () => {\n      console.log('This before every useEffect');\n      stop();\n    };\n  }, []);\n\n  const stop = () => {\n    clearInterval(intervalId.current);\n  }\n\n  return (\n    <><Clocki time={time} text='Current Time By Hooks' onClick={stop} refferer={buttonRef} /></>\n  );\n};\n\nexport function Clock() {\n  return (\n    <>\n      <ClockHooks />\n      <ClockClass />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}