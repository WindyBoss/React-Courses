{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) || initialValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n  return [storedValue, setStoredValue];\n};\n/*\n* Sometimes we need to store some data in the local storage, and is necessary to use the customer stringifier and parser\n*/\n\n_s(useLocalStorage, \"ACkpph6fyyeHHlI5TPcDzo2t+B8=\");\n\nexport const useLocalStorageModif = function (key, initialValue) {\n  _s2();\n\n  let serialize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : JSON.stringify;\n  let deserialize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : JSON.parse;\n  const [storedValue, setStoredValue] = useState(() => {\n    return deserialize(window.localStorage.getItem(key)) || initialValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, serialize(storedValue));\n  }, [key, storedValue, serialize]);\n  return [storedValue, setStoredValue];\n};\n\n_s2(useLocalStorageModif, \"iYR+8OATV3+cmSgbur4Tx8N4D/o=\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/Hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","key","initialValue","storedValue","setStoredValue","JSON","parse","window","localStorage","getItem","setItem","stringify","useLocalStorageModif","serialize","deserialize"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;AAAA;;AACpD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,MAAM;AACnD,WAAOO,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,GAA5B,CAAX,KAAgDC,YAAvD;AACD,GAF6C,CAA9C;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4BT,GAA5B,EAAiCI,IAAI,CAACM,SAAL,CAAeR,WAAf,CAAjC;AACD,GAFQ,EAEN,CAACF,GAAD,EAAME,WAAN,CAFM,CAAT;AAIA,SAAO,CAACA,WAAD,EAAcC,cAAd,CAAP;AACD,CAVM;AAYP;AACA;AACA;;GAdaJ,e;;AAeb,OAAO,MAAMY,oBAAoB,GAAG,UAACX,GAAD,EAAMC,YAAN,EAA6E;AAAA;;AAAA,MAAzDW,SAAyD,uEAA7CR,IAAI,CAACM,SAAwC;AAAA,MAA7BG,WAA6B,uEAAfT,IAAI,CAACC,KAAU;AAC/G,QAAM,CAACH,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,MAAM;AACnD,WAAOgB,WAAW,CAACP,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,GAA5B,CAAD,CAAX,IAAiDC,YAAxD;AACD,GAF6C,CAA9C;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4BT,GAA5B,EAAiCY,SAAS,CAACV,WAAD,CAA1C;AACD,GAFQ,EAEN,CAACF,GAAD,EAAME,WAAN,EAAmBU,SAAnB,CAFM,CAAT;AAIA,SAAO,CAACV,WAAD,EAAcC,cAAd,CAAP;AACD,CAVM;;IAAMQ,oB","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) || initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};\n\n/*\n* Sometimes we need to store some data in the local storage, and is necessary to use the customer stringifier and parser\n*/\nexport const useLocalStorageModif = (key, initialValue, serialize = JSON.stringify, deserialize = JSON.parse) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    return deserialize(window.localStorage.getItem(key)) || initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, serialize(storedValue));\n  }, [key, storedValue, serialize]);\n\n  return [storedValue, setStoredValue];\n};\n"]},"metadata":{},"sourceType":"module"}