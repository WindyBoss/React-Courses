{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { styled } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\nexport const btnStyles = (_ref, hover) => {\n  let {\n    btnTextColor,\n    btnBgColor,\n    btnBorderColor,\n    hoverBtnColor,\n    hoverBtnBgColor\n  } = _ref;\n  return {\n    color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`,\n    backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n    border: `1px solid ${btnBorderColor}`,\n    transform: !hover ? 'scale(1)' : 'scale(1.1)'\n  };\n};\nexport function ButtonStyled(_ref2) {\n  _s();\n\n  let {\n    children,\n    onClick,\n    colors,\n    endIcon,\n    type,\n    disabled,\n    btnBgColor,\n    addFeat\n  } = _ref2;\n  const [hover, setHover] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    style: btnBgColor ? { ...addFeat,\n      ...btnStyles(colors, hover),\n      color: btnBgColor,\n      backgroundColor: '#b2b276'\n    } : { ...addFeat,\n      ...btnStyles(colors, hover)\n    },\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    onClick: onClick,\n    variant: \"contained\",\n    type: type,\n    endIcon: endIcon,\n    disabled: disabled,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ButtonStyled, \"bRXmKus9fOZFlca/6zXTYU+twGY=\");\n\n_c = ButtonStyled;\n;\nexport const fieldStyles = (_ref3, hover) => {\n  let {\n    btnTextColor,\n    btnBgColor,\n    btnBorderColor,\n    hoverBtnColor,\n    hoverBtnBgColor\n  } = _ref3;\n  return {\n    color: !hover ? `white` : `white`,\n    backgroundColor: !hover ? `transparent` : `transparent`\n  };\n};\nexport function TextFieldStyled(_ref4) {\n  _s2();\n\n  let {\n    value,\n    onChange,\n    colors,\n    label,\n    variant,\n    size,\n    type,\n    id,\n    hoverColor,\n    color,\n    focused,\n    darkTheme\n  } = _ref4;\n  const [hover, setHover] = useState(false);\n  return /*#__PURE__*/_jsxDEV(CssTextField, {\n    onFocus: () => setHover(true),\n    onBlur: () => setHover(false),\n    type: type,\n    value: value,\n    label: label,\n    variant: variant,\n    size: size,\n    id: id,\n    onChange: onChange,\n    color: hover ? color : hoverColor // color={'purple'}\n    // focused={focused}\n    ,\n    style: fieldStyles(colors, hover) // InputLabelProps={{ shrink: true }}\n    // className={darkTheme ? styles.setColorWhite : styles.setColorBlack}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TextFieldStyled, \"bRXmKus9fOZFlca/6zXTYU+twGY=\");\n\n_c2 = TextFieldStyled;\nconst CssTextField = styled(TextField)({\n  '& label.Mui-focused': {\n    color: 'green'\n  },\n  '& label :hover': {\n    color: 'yellow'\n  },\n  '& label': {\n    color: 'blue'\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green'\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'red'\n    },\n    '&:hover fieldset': {\n      borderColor: 'yellow'\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green'\n    }\n  }\n});\n_c3 = CssTextField;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ButtonStyled\");\n$RefreshReg$(_c2, \"TextFieldStyled\");\n$RefreshReg$(_c3, \"CssTextField\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx"],"names":["createGlobalStyle","Button","useState","TextField","styled","GlobalStyle","props","theme","colors","globalBgColor","btnStyles","hover","btnTextColor","btnBgColor","btnBorderColor","hoverBtnColor","hoverBtnBgColor","color","backgroundColor","border","transform","ButtonStyled","children","onClick","endIcon","type","disabled","addFeat","setHover","fieldStyles","TextFieldStyled","value","onChange","label","variant","size","id","hoverColor","focused","darkTheme","CssTextField","borderBottomColor","borderColor"],"mappings":"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","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\nimport { styled } from '@mui/material/styles';\n\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\n\nexport const btnStyles = ({btnTextColor, btnBgColor, btnBorderColor, hoverBtnColor, hoverBtnBgColor}, hover) => {\n    return (\n      {\n        color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`, \n        backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n        border: `1px solid ${btnBorderColor}`,\n        transform: !hover ? 'scale(1)' : 'scale(1.1)'\n      }\n    );\n};\n\nexport function ButtonStyled ({\n  children, \n  onClick, \n  colors, \n  endIcon, \n  type, \n  disabled, \n  btnBgColor, \n  addFeat\n}) {\n   const [hover, setHover] = useState(false);  \n   return (\n    <Button\n      style={ btnBgColor ? {...addFeat, ...btnStyles(colors, hover), color: btnBgColor, backgroundColor: '#b2b276'} : {...addFeat, ...btnStyles(colors, hover)}}\n      onPointerOver={()=> setHover(true)}\n      onPointerOut={() => setHover(false)}\n      onClick={onClick}\n      variant=\"contained\" \n      type={type}\n      endIcon={endIcon}\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  )\n};\n\nexport const fieldStyles = ({btnTextColor, btnBgColor, btnBorderColor, hoverBtnColor, hoverBtnBgColor}, hover) => {\n  return (\n    {\n      color: !hover ? `white` : `white`, \n      backgroundColor: !hover ? `transparent` : `transparent`,\n    }\n  );\n};\n\nexport function TextFieldStyled ({ \n  value, \n  onChange, \n  colors, \n  label, \n  variant, \n  size, \n  type, \n  id, \n  hoverColor,\n  color,\n  focused,\n  darkTheme\n}) {\n  const [hover, setHover] = useState(false);  \n  return (\n    <CssTextField\n      onFocus={()=> setHover(true)}\n      onBlur={() => setHover(false)}\n      type={type}\n      value={value}\n      label={label}\n      variant={variant}\n      size={size}\n      id={id}\n      onChange={onChange}\n      color={hover ? color : hoverColor}\n      // color={'purple'}\n      // focused={focused}\n      style={(fieldStyles(colors, hover))}\n      // InputLabelProps={{ shrink: true }}\n      // className={darkTheme ? styles.setColorWhite : styles.setColorBlack}\n    />\n  )\n}\n\nconst CssTextField = styled(TextField)({\n  '& label.Mui-focused': {\n    color: 'green',\n  },\n  '& label :hover': {\n    color: 'yellow',\n  },\n  '& label': {\n    color: 'blue',\n  },\n\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'green',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'red',\n    },\n    '&:hover fieldset': {\n      borderColor: 'yellow',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'green',\n    },\n  },\n});"]},"metadata":{},"sourceType":"module"}