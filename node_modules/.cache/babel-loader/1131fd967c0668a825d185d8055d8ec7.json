{"ast":null,"code":"import { createAction, createReducer, current } from '@reduxjs/toolkit';\nconst initialState = {\n  todos: []\n}; // const addTodo = createAction('todos/addTodo');\n// const deleteTodo = createAction('todos/deleteTodo');\n// const toggleTodo = createAction('todos/toggleTodo');\n// const todoBuilderReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addTodo, (state, { payload }) => state.todos.push(payload))\n//         .addCase(deleteTodo, (state, { payload }) =>\n//             state.todos.filter(({ id }) => id !== payload)\n//         )\n//         .addCase(toggleTodo, (state, { payload }) =>\n//             state.todos.map(todo =>\n//                 todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//             )\n//         )\n//         .addDefaultCase(state => {\n//             return state;\n//         });\n// });\n// const todoReducer = createReducer(initialState, {\n//   [addTodo]: (state, { payload }) => state.todos.push(payload),\n//   [deleteTodo]: (state, { payload }) =>\n//     state.todos.filter(({ id }) => id !== payload),\n//   [toggleTodo]: (state, { payload }) =>\n//     state.todos.map(todo =>\n//       todo.id === payload ? { ...todo, completed: !todo.completed } : todo\n//     ),\n// });\n\nexport const todoReducer = createReducer(initialState, {\n  addTodo: (state, _ref) => {\n    let {\n      payload\n    } = _ref;\n    console.log('before', current(state));\n    state.todos.push(payload);\n    console.log('after', current(state));\n  },\n  deleteTodo: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    console.log('before', current(state));\n    return state.todos.filter(_ref3 => {\n      let {\n        id\n      } = _ref3;\n      return id !== payload;\n    });\n  },\n  toggleTodo: (state, _ref4) => {\n    let {\n      payload\n    } = _ref4;\n    console.log('before', current(state));\n    return state.todos.map(todo => todo.id === payload ? { ...todo,\n      completed: !todo.completed\n    } : todo);\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  toggleTodo\n} = todoReducer.actions;","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoReducer.js"],"names":["createAction","createReducer","current","initialState","todos","todoReducer","addTodo","state","payload","console","log","push","deleteTodo","filter","id","toggleTodo","map","todo","completed","actions"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,kBAArD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB,C,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,CAACE,YAAD,EAAe;AACnDG,EAAAA,OAAO,EAAE,CAACC,KAAD,WAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,OAAO,CAACK,KAAD,CAA7B;AACAA,IAAAA,KAAK,CAACH,KAAN,CAAYO,IAAZ,CAAiBH,OAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,OAAO,CAACK,KAAD,CAA5B;AACH,GALkD;AAMnDK,EAAAA,UAAU,EAAE,CAACL,KAAD,YAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,OAAO,CAACK,KAAD,CAA7B;AACA,WAAOA,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAmB;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAYA,EAAE,KAAKN,OAAnB;AAAA,KAAnB,CAAP;AACH,GATkD;AAUnDO,EAAAA,UAAU,EAAE,CAACR,KAAD,YAAwB;AAAA,QAAhB;AAAEC,MAAAA;AAAF,KAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,OAAO,CAACK,KAAD,CAA7B;AAEA,WAAOA,KAAK,CAACH,KAAN,CAAYY,GAAZ,CAAgBC,IAAI,IACvBA,IAAI,CAACH,EAAL,KAAYN,OAAZ,GAAsB,EAAC,GAAGS,IAAJ;AAAUC,MAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,KAAtB,GAA+DD,IAD5D,CAAP;AAGH;AAhBkD,CAAf,CAAjC;AAmBP,OAAO,MAAM;AAAEX,EAAAA,OAAF;AAAWM,EAAAA,UAAX;AAAuBG,EAAAA;AAAvB,IAAsCV,WAAW,CAACc,OAAxD","sourcesContent":["import { createAction, createReducer, current } from '@reduxjs/toolkit';\n\nconst initialState = {\n    todos: [],\n};\n\n// const addTodo = createAction('todos/addTodo');\n// const deleteTodo = createAction('todos/deleteTodo');\n// const toggleTodo = createAction('todos/toggleTodo');\n\n// const todoBuilderReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addTodo, (state, { payload }) => state.todos.push(payload))\n//         .addCase(deleteTodo, (state, { payload }) =>\n//             state.todos.filter(({ id }) => id !== payload)\n//         )\n//         .addCase(toggleTodo, (state, { payload }) =>\n//             state.todos.map(todo =>\n//                 todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//             )\n//         )\n//         .addDefaultCase(state => {\n//             return state;\n//         });\n// });\n\n// const todoReducer = createReducer(initialState, {\n//   [addTodo]: (state, { payload }) => state.todos.push(payload),\n//   [deleteTodo]: (state, { payload }) =>\n//     state.todos.filter(({ id }) => id !== payload),\n//   [toggleTodo]: (state, { payload }) =>\n//     state.todos.map(todo =>\n//       todo.id === payload ? { ...todo, completed: !todo.completed } : todo\n//     ),\n// });\n\nexport const todoReducer = createReducer(initialState, {\n    addTodo: (state, { payload }) => {\n        console.log('before', current(state));\n        state.todos.push(payload);\n        console.log('after', current(state));\n    },\n    deleteTodo: (state, { payload }) => {\n        console.log('before', current(state));\n        return state.todos.filter(({ id }) => id !== payload);\n    },\n    toggleTodo: (state, { payload }) => {\n        console.log('before', current(state));\n\n        return state.todos.map(todo =>\n            todo.id === payload ? {...todo, completed: !todo.completed } : todo\n        );\n    },\n});\n\nexport const { addTodo, deleteTodo, toggleTodo } = todoReducer.actions;"]},"metadata":{},"sourceType":"module"}