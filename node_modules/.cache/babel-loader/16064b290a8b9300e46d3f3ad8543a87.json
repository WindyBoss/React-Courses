{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useFetch = _ref => {\n  _s();\n\n  let {\n    fetchFunc,\n    apiState,\n    firstRenderCheck = false,\n    addProp,\n    initialValue = null,\n    stopFirstRender = false\n  } = _ref;\n  const [state, setState] = useState(initialValue);\n  useEffect(() => {\n    if (stopFirstRender) {\n      return;\n    }\n\n    const abortController = new AbortController();\n\n    const fetch = async () => {\n      apiState.pending();\n\n      try {\n        const data = await fetchFunc(addProp);\n        setState(data);\n        apiState.success();\n      } catch (error) {\n        apiState.error();\n      }\n    };\n\n    if (firstRenderCheck) {\n      if (addProp) {\n        fetch();\n      }\n    } else {\n      fetch();\n    }\n\n    return () => {\n      abortController.abort();\n    };\n  }, [apiState, addProp, setState, fetchFunc, firstRenderCheck, stopFirstRender]);\n  return {\n    state,\n    setState\n  };\n};\n\n_s(useFetch, \"B1FcqwTn3qlx2WKEh9N7cA94mDs=\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","fetchFunc","apiState","firstRenderCheck","addProp","initialValue","stopFirstRender","state","setState","abortController","AbortController","fetch","pending","data","success","error","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,QAOlB;AAAA;;AAAA,MAPmB;AACvBC,IAAAA,SADuB;AAEvBC,IAAAA,QAFuB;AAGvBC,IAAAA,gBAAgB,GAAG,KAHI;AAIvBC,IAAAA,OAJuB;AAKvBC,IAAAA,YAAY,GAAG,IALQ;AAMvBC,IAAAA,eAAe,GAAG;AANK,GAOnB;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACO,YAAD,CAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,eAAJ,EAAqB;AACnB;AACD;;AAED,UAAMG,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,UAAMC,KAAK,GAAG,YAAY;AACxBT,MAAAA,QAAQ,CAACU,OAAT;;AACA,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMZ,SAAS,CAACG,OAAD,CAA5B;AACAI,QAAAA,QAAQ,CAACK,IAAD,CAAR;AACAX,QAAAA,QAAQ,CAACY,OAAT;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACdb,QAAAA,QAAQ,CAACa,KAAT;AACD;AACF,KATD;;AAWA,QAAIZ,gBAAJ,EAAsB;AACpB,UAAIC,OAAJ,EAAa;AACXO,QAAAA,KAAK;AACN;AACF,KAJD,MAIO;AACLA,MAAAA,KAAK;AACN;;AAED,WAAO,MAAM;AACXF,MAAAA,eAAe,CAACO,KAAhB;AACD,KAFD;AAGD,GA5BQ,EA4BN,CACDd,QADC,EAEDE,OAFC,EAGDI,QAHC,EAIDP,SAJC,EAKDE,gBALC,EAMDG,eANC,CA5BM,CAAT;AAqCA,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAhDM;;GAAMR,Q","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useFetch = ({\n  fetchFunc,\n  apiState,\n  firstRenderCheck = false,\n  addProp,\n  initialValue = null,\n  stopFirstRender = false,\n}) => {\n  const [state, setState] = useState(initialValue);\n\n  useEffect(() => {\n    if (stopFirstRender) {\n      return;\n    }\n\n    const abortController = new AbortController();\n    const fetch = async () => {\n      apiState.pending();\n      try {\n        const data = await fetchFunc(addProp);\n        setState(data);\n        apiState.success();\n      } catch (error) {\n        apiState.error();\n      }\n    };\n\n    if (firstRenderCheck) {\n      if (addProp) {\n        fetch();\n      }\n    } else {\n      fetch();\n    }\n\n    return () => {\n      abortController.abort();\n    };\n  }, [\n    apiState,\n    addProp,\n    setState,\n    fetchFunc,\n    firstRenderCheck,\n    stopFirstRender,\n  ]);\n\n  return { state, setState };\n};\n"]},"metadata":{},"sourceType":"module"}