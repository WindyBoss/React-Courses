{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/Todos.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTodoRequest, fetchTodoSuccess, fetchTodoError, addTodoRequest, addTodoSuccess, addTodoError, deleteTodoRequest, deleteTodoSuccess, deleteTodoError, toggleCompleteRequest, toggleCompleteSuccess, toggleCompleteError } from 'redux/todos/todoActions';\nimport { getTodos, useGetTodosQuery } from 'service/apiService';\nimport { TodoListWrapper } from './components/TodoListWrapper';\nimport TodoFilter from './components/TodoFilter';\nimport TodoEditor from './components/TodoEditor';\nimport ModalWindow from 'components/ModalWindow';\nimport { StyledList, HeaderTextContainer, Text } from './styles/TodoList.styled';\nimport { themeContext } from 'context/themeContext';\nimport { ButtonStyled } from 'components/CommonComponents';\nimport CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\nimport { useModal } from 'hooks';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Todos() {\n  _s();\n\n  const [showModal, toggleModal] = useModal(false);\n  const listRef = /*#__PURE__*/React.createRef();\n  const {\n    data: posts,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetTodosQuery();\n  /*\n   * useDispatch - connect actions with active UI elements\n   * useSelector - returns state elements\n   */\n\n  const dispatch = useDispatch();\n  const storeTodos = useSelector(state => state.todoList.todos);\n  const filter = useSelector(state => state.todoList.filter);\n  const completedTasksNumber = storeTodos ? storeTodos.reduce((acc, todo) => todo.completed ? acc + 1 : acc, 0) : 0; // const filterTasks = e => {\n  //   dispatch(setFilter(e.target.value));\n  // };\n\n  useEffect(() => {\n    async function getAllTodos() {\n      dispatch(fetchTodoRequest());\n\n      try {\n        const response = await getTodos();\n        console.log(response);\n        dispatch(fetchTodoSuccess(response));\n      } catch (error) {\n        dispatch(fetchTodoError());\n      }\n    }\n\n    getAllTodos();\n  }, [dispatch]);\n  console.log(getTodos()); // const deleteTask = taskId => {\n  //   dispatch(deleteTodo(taskId));\n  // };\n  // const toggleCompleted = taskId => {\n  //   dispatch(toggleTodo(taskId));\n  // };\n\n  const filterTodos = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return storeTodos.filter(todo => todo.name.includes(normalizedFilter) || todo.description.includes(normalizedFilter));\n  }; // const addTask = ({ name, description, deadline, priority }) => {\n  //   /*\n  //    * action must be called inside useDispatch, which transport action to reducer factory\n  //    */\n  //   dispatch(\n  //     addTodo({\n  //       name: name,\n  //       deadline: deadline,\n  //       description: description,\n  //       priority: priority,\n  //     })\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading...\"\n    }, void 0, false), isSuccess && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"isSuccess...\"\n    }, void 0, false), isError && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"isError...\"\n    }, void 0, false)]\n  }, void 0, true) //   <TodoContainer\n  //     listRef={listRef}\n  //     completedTasksNumber={completedTasksNumber}\n  //     todos={filterTodos()}\n  //     // filterTasks={filterTasks}\n  //     toggleModal={toggleModal}\n  //     // deleteTask={deleteTask}\n  //     // toggleCompleted={toggleCompleted}\n  //     // addTask={addTask}\n  //     showModal={showModal}\n  //   />\n  // ) : (\n  // <></>\n  ;\n}\n\n_s(Todos, \"Axsc3SmD8DGjXb6osYm211QxIDA=\", false, function () {\n  return [useModal, useGetTodosQuery, useDispatch, useSelector, useSelector];\n});\n\n_c = Todos;\n\nfunction TodoContainer(_ref) {\n  _s2();\n\n  let {\n    listRef,\n    completedTasksNumber,\n    todos,\n    filterTasks,\n    toggleModal,\n    deleteTask,\n    toggleCompleted,\n    addTask,\n    showModal\n  } = _ref;\n  const {\n    mainTheme\n  } = useContext(themeContext);\n  return /*#__PURE__*/_jsxDEV(StyledList, {\n    ref: listRef,\n    children: [/*#__PURE__*/_jsxDEV(HeaderTextContainer, {\n      colors: mainTheme.colors,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Year Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Completed: \", completedTasksNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Total: \", todos.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoFilter, {\n        colors: mainTheme.colors,\n        onChange: filterTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonStyled, {\n        colors: mainTheme.colors,\n        onClick: toggleModal,\n        \"aria-label\": \"showModal\",\n        endIcon: /*#__PURE__*/_jsxDEV(CreateTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 20\n        }, this),\n        addFeat: {\n          position: 'absolute',\n          right: '10px',\n          top: '10px'\n        },\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoListWrapper, {\n      todoList: todos,\n      onDelete: deleteTask,\n      onToggle: toggleCompleted,\n      themeColors: mainTheme.colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(ModalWindow, {\n      todolist: \"todolist\",\n      onSubmit: addTask,\n      onClick: toggleModal,\n      mainTheme: mainTheme,\n      children: /*#__PURE__*/_jsxDEV(TodoEditor, {\n        colors: mainTheme.colors,\n        onSubmit: addTask,\n        onClick: toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TodoContainer, \"6O+QO+COAUPkhIjn1biEpC1Pcjc=\");\n\n_c2 = TodoContainer;\nexport default Todos; // import React, { useContext, useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   addTodo,\n//   deleteTodo,\n//   toggleTodo,\n//   setFilter,\n// } from 'redux/todos/todoSlice';\n// import { getTodos } from 'service/apiService';\n// import { TodoListWrapper } from './components/TodoListWrapper';\n// import TodoFilter from './components/TodoFilter';\n// import TodoEditor from './components/TodoEditor';\n// import ModalWindow from 'components/ModalWindow';\n// import {\n//   StyledList,\n//   HeaderTextContainer,\n//   Text,\n// } from './styles/TodoList.styled';\n// import { themeContext } from 'context/themeContext';\n// import { ButtonStyled } from 'components/CommonComponents';\n// import CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n// import { useModal } from 'hooks';\n// function Todos() {\n//   const [showModal, toggleModal] = useModal(false);\n//   const listRef = React.createRef();\n//   /*\n//    * useDispatch - connect actions with active UI elements\n//    * useSelector - returns state elements\n//    */\n//   const dispatch = useDispatch();\n//   const storeTodos = useSelector(state => state.todoList.todos);\n//   const filter = useSelector(state => state.todoList.filter);\n//   const completedTasksNumber = storeTodos\n//     ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n//     : 0;\n//   const filterTasks = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n//   console.log(getTodos());\n//   const deleteTask = taskId => {\n//     dispatch(deleteTodo(taskId));\n//   };\n//   const toggleCompleted = taskId => {\n//     dispatch(toggleTodo(taskId));\n//   };\n//   const filterTodos = () => {\n//     const normalizedFilter = filter.toLowerCase();\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.includes(normalizedFilter) ||\n//         todo.description.includes(normalizedFilter)\n//     );\n//   };\n//   const addTask = ({ name, description, deadline, priority }) => {\n//     /*\n//      * action must be called inside useDispatch, which transport action to reducer factory\n//      */\n//     dispatch(\n//       addTodo({\n//         name: name,\n//         deadline: deadline,\n//         description: description,\n//         priority: priority,\n//       })\n//     );\n//   };\n//   return storeTodos ? (\n//     <TodoContainer\n//       listRef={listRef}\n//       completedTasksNumber={completedTasksNumber}\n//       todos={filterTodos()}\n//       filterTasks={filterTasks}\n//       toggleModal={toggleModal}\n//       deleteTask={deleteTask}\n//       toggleCompleted={toggleCompleted}\n//       addTask={addTask}\n//       showModal={showModal}\n//     />\n//   ) : (\n//     <></>\n//   );\n// }\n// function TodoContainer({\n//   listRef,\n//   completedTasksNumber,\n//   todos,\n//   filterTasks,\n//   toggleModal,\n//   deleteTask,\n//   toggleCompleted,\n//   addTask,\n//   showModal,\n// }) {\n//   const { mainTheme } = useContext(themeContext);\n//   return (\n//     <StyledList ref={listRef}>\n//       <HeaderTextContainer colors={mainTheme.colors}>\n//         <h2>Year Task List</h2>\n//         <Text>Completed: {completedTasksNumber}</Text>\n//         <Text>Total: {todos.length}</Text>\n//         <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n//         <ButtonStyled\n//           colors={mainTheme.colors}\n//           onClick={toggleModal}\n//           aria-label=\"showModal\"\n//           endIcon={<CreateTwoToneIcon />}\n//           addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n//         >\n//           Add Task\n//         </ButtonStyled>\n//       </HeaderTextContainer>\n//       <TodoListWrapper\n//         todoList={todos}\n//         onDelete={deleteTask}\n//         onToggle={toggleCompleted}\n//         themeColors={mainTheme.colors}\n//       />\n//       {showModal && (\n//         <ModalWindow\n//           todolist=\"todolist\"\n//           onSubmit={addTask}\n//           onClick={toggleModal}\n//           mainTheme={mainTheme}\n//         >\n//           <TodoEditor\n//             colors={mainTheme.colors}\n//             onSubmit={addTask}\n//             onClick={toggleModal}\n//           />\n//         </ModalWindow>\n//       )}\n//     </StyledList>\n//   );\n// }\n// export default Todos;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Todos\");\n$RefreshReg$(_c2, \"TodoContainer\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/Todos.jsx"],"names":["React","useContext","useState","useEffect","useSelector","useDispatch","fetchTodoRequest","fetchTodoSuccess","fetchTodoError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompleteRequest","toggleCompleteSuccess","toggleCompleteError","getTodos","useGetTodosQuery","TodoListWrapper","TodoFilter","TodoEditor","ModalWindow","StyledList","HeaderTextContainer","Text","themeContext","ButtonStyled","CreateTwoToneIcon","useModal","Todos","showModal","toggleModal","listRef","createRef","data","posts","isLoading","isSuccess","isError","error","dispatch","storeTodos","state","todoList","todos","filter","completedTasksNumber","reduce","acc","todo","completed","getAllTodos","response","console","log","filterTodos","normalizedFilter","toLowerCase","name","includes","description","TodoContainer","filterTasks","deleteTask","toggleCompleted","addTask","mainTheme","colors","length","position","right","top"],"mappings":"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":["import React, { useContext, useState, useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  fetchTodoRequest,\n  fetchTodoSuccess,\n  fetchTodoError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompleteRequest,\n  toggleCompleteSuccess,\n  toggleCompleteError,\n} from 'redux/todos/todoActions';\n\nimport { getTodos, useGetTodosQuery } from 'service/apiService';\n\nimport { TodoListWrapper } from './components/TodoListWrapper';\nimport TodoFilter from './components/TodoFilter';\nimport TodoEditor from './components/TodoEditor';\nimport ModalWindow from 'components/ModalWindow';\n\nimport {\n  StyledList,\n  HeaderTextContainer,\n  Text,\n} from './styles/TodoList.styled';\n\nimport { themeContext } from 'context/themeContext';\n\nimport { ButtonStyled } from 'components/CommonComponents';\nimport CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n\nimport { useModal } from 'hooks';\n\nfunction Todos() {\n  const [showModal, toggleModal] = useModal(false);\n  const listRef = React.createRef();\n\n  const { data: posts, isLoading, isSuccess, isError, error } = useGetTodosQuery();\n\n  /*\n   * useDispatch - connect actions with active UI elements\n   * useSelector - returns state elements\n   */\n\n  const dispatch = useDispatch();\n  const storeTodos = useSelector(state => state.todoList.todos);\n  const filter = useSelector(state => state.todoList.filter);\n\n  const completedTasksNumber = storeTodos\n    ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n    : 0;\n\n  // const filterTasks = e => {\n  //   dispatch(setFilter(e.target.value));\n  // };\n\n  useEffect(() => {\n    async function getAllTodos() {\n      dispatch(fetchTodoRequest());\n\n      try {\n        const response = await getTodos();\n        console.log(response);\n        dispatch(fetchTodoSuccess(response));\n      } catch (error) {\n        dispatch(fetchTodoError());\n      }\n    }\n\n    getAllTodos();\n  }, [dispatch]);\n\n  console.log(getTodos());\n\n  // const deleteTask = taskId => {\n  //   dispatch(deleteTodo(taskId));\n  // };\n\n  // const toggleCompleted = taskId => {\n  //   dispatch(toggleTodo(taskId));\n  // };\n\n  const filterTodos = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return storeTodos.filter(\n      todo =>\n        todo.name.includes(normalizedFilter) ||\n        todo.description.includes(normalizedFilter)\n    );\n  };\n\n  // const addTask = ({ name, description, deadline, priority }) => {\n  //   /*\n  //    * action must be called inside useDispatch, which transport action to reducer factory\n  //    */\n  //   dispatch(\n  //     addTodo({\n  //       name: name,\n  //       deadline: deadline,\n  //       description: description,\n  //       priority: priority,\n  //     })\n  //   );\n  // };\n\n  return (\n    <>\n      {isLoading && <>Loading...</>}\n      {isSuccess && <>isSuccess...</>}\n      {isError && <>isError...</>}\n    </>\n  //   <TodoContainer\n  //     listRef={listRef}\n  //     completedTasksNumber={completedTasksNumber}\n  //     todos={filterTodos()}\n  //     // filterTasks={filterTasks}\n  //     toggleModal={toggleModal}\n  //     // deleteTask={deleteTask}\n  //     // toggleCompleted={toggleCompleted}\n  //     // addTask={addTask}\n  //     showModal={showModal}\n  //   />\n  // ) : (\n    // <></>\n\n\n  );\n}\n\nfunction TodoContainer({\n  listRef,\n  completedTasksNumber,\n  todos,\n  filterTasks,\n  toggleModal,\n  deleteTask,\n  toggleCompleted,\n  addTask,\n  showModal,\n}) {\n  const { mainTheme } = useContext(themeContext);\n\n  return (\n    <StyledList ref={listRef}>\n      <HeaderTextContainer colors={mainTheme.colors}>\n        <h2>Year Task List</h2>\n        <Text>Completed: {completedTasksNumber}</Text>\n        <Text>Total: {todos.length}</Text>\n        <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n        <ButtonStyled\n          colors={mainTheme.colors}\n          onClick={toggleModal}\n          aria-label=\"showModal\"\n          endIcon={<CreateTwoToneIcon />}\n          addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n        >\n          Add Task\n        </ButtonStyled>\n      </HeaderTextContainer>\n\n      <TodoListWrapper\n        todoList={todos}\n        onDelete={deleteTask}\n        onToggle={toggleCompleted}\n        themeColors={mainTheme.colors}\n      />\n      {showModal && (\n        <ModalWindow\n          todolist=\"todolist\"\n          onSubmit={addTask}\n          onClick={toggleModal}\n          mainTheme={mainTheme}\n        >\n          <TodoEditor\n            colors={mainTheme.colors}\n            onSubmit={addTask}\n            onClick={toggleModal}\n          />\n        </ModalWindow>\n      )}\n    </StyledList>\n  );\n}\n\nexport default Todos;\n\n// import React, { useContext, useState, useEffect } from 'react';\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   addTodo,\n//   deleteTodo,\n//   toggleTodo,\n//   setFilter,\n// } from 'redux/todos/todoSlice';\n\n// import { getTodos } from 'service/apiService';\n\n// import { TodoListWrapper } from './components/TodoListWrapper';\n// import TodoFilter from './components/TodoFilter';\n// import TodoEditor from './components/TodoEditor';\n// import ModalWindow from 'components/ModalWindow';\n\n// import {\n//   StyledList,\n//   HeaderTextContainer,\n//   Text,\n// } from './styles/TodoList.styled';\n\n// import { themeContext } from 'context/themeContext';\n\n// import { ButtonStyled } from 'components/CommonComponents';\n// import CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n\n// import { useModal } from 'hooks';\n\n// function Todos() {\n//   const [showModal, toggleModal] = useModal(false);\n//   const listRef = React.createRef();\n\n//   /*\n//    * useDispatch - connect actions with active UI elements\n//    * useSelector - returns state elements\n//    */\n\n//   const dispatch = useDispatch();\n//   const storeTodos = useSelector(state => state.todoList.todos);\n//   const filter = useSelector(state => state.todoList.filter);\n\n//   const completedTasksNumber = storeTodos\n//     ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n//     : 0;\n\n//   const filterTasks = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n\n//   console.log(getTodos());\n\n//   const deleteTask = taskId => {\n//     dispatch(deleteTodo(taskId));\n//   };\n\n//   const toggleCompleted = taskId => {\n//     dispatch(toggleTodo(taskId));\n//   };\n\n//   const filterTodos = () => {\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.includes(normalizedFilter) ||\n//         todo.description.includes(normalizedFilter)\n//     );\n//   };\n\n//   const addTask = ({ name, description, deadline, priority }) => {\n//     /*\n//      * action must be called inside useDispatch, which transport action to reducer factory\n//      */\n//     dispatch(\n//       addTodo({\n//         name: name,\n//         deadline: deadline,\n//         description: description,\n//         priority: priority,\n//       })\n//     );\n//   };\n\n//   return storeTodos ? (\n//     <TodoContainer\n//       listRef={listRef}\n//       completedTasksNumber={completedTasksNumber}\n//       todos={filterTodos()}\n//       filterTasks={filterTasks}\n//       toggleModal={toggleModal}\n//       deleteTask={deleteTask}\n//       toggleCompleted={toggleCompleted}\n//       addTask={addTask}\n//       showModal={showModal}\n//     />\n//   ) : (\n//     <></>\n//   );\n// }\n\n// function TodoContainer({\n//   listRef,\n//   completedTasksNumber,\n//   todos,\n//   filterTasks,\n//   toggleModal,\n//   deleteTask,\n//   toggleCompleted,\n//   addTask,\n//   showModal,\n// }) {\n//   const { mainTheme } = useContext(themeContext);\n\n//   return (\n//     <StyledList ref={listRef}>\n//       <HeaderTextContainer colors={mainTheme.colors}>\n//         <h2>Year Task List</h2>\n//         <Text>Completed: {completedTasksNumber}</Text>\n//         <Text>Total: {todos.length}</Text>\n//         <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n//         <ButtonStyled\n//           colors={mainTheme.colors}\n//           onClick={toggleModal}\n//           aria-label=\"showModal\"\n//           endIcon={<CreateTwoToneIcon />}\n//           addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n//         >\n//           Add Task\n//         </ButtonStyled>\n//       </HeaderTextContainer>\n\n//       <TodoListWrapper\n//         todoList={todos}\n//         onDelete={deleteTask}\n//         onToggle={toggleCompleted}\n//         themeColors={mainTheme.colors}\n//       />\n//       {showModal && (\n//         <ModalWindow\n//           todolist=\"todolist\"\n//           onSubmit={addTask}\n//           onClick={toggleModal}\n//           mainTheme={mainTheme}\n//         >\n//           <TodoEditor\n//             colors={mainTheme.colors}\n//             onSubmit={addTask}\n//             onClick={toggleModal}\n//           />\n//         </ModalWindow>\n//       )}\n//     </StyledList>\n//   );\n// }\n\n// export default Todos;\n"]},"metadata":{},"sourceType":"module"}