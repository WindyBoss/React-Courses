{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/components/TodoListWrapper.jsx\";\nimport { ListEl, TodoListContainer } from '../styles/TodoList.styled';\nimport TodoEl from './TodoEl';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TodoListWrapper(_ref) {\n  let {\n    todoList,\n    onDelete,\n    onToggle,\n    themeColors\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(TodoListContainer, {\n    children: todoList.map(todo => /*#__PURE__*/_jsxDEV(ListEl, {\n      colors: themeColors,\n      children: /*#__PURE__*/_jsxDEV(TodoEl, {\n        todo: todo,\n        deleteTask: onDelete,\n        toggleCompleted: onToggle,\n        colors: themeColors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n_c = TodoListWrapper;\nTodoListWrapper.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    deadline: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    priority: PropTypes.string.isRequired\n  })).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  themeColors: PropTypes.objectOf(PropTypes.string).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoListWrapper\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/components/TodoListWrapper.jsx"],"names":["ListEl","TodoListContainer","TodoEl","PropTypes","TodoListWrapper","todoList","onDelete","onToggle","themeColors","map","todo","id","propTypes","arrayOf","shape","completed","bool","isRequired","deadline","string","description","name","priority","func","objectOf"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,iBAAjB,QAA0C,2BAA1C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,eAAT,OAAwE;AAAA,MAA/C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,GAA+C;AAC7E,sBACE,QAAC,iBAAD;AAAA,cACGH,QAAQ,CAACI,GAAT,CAAaC,IAAI,iBAChB,QAAC,MAAD;AAAsB,MAAA,MAAM,EAAEF,WAA9B;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAEE,IADR;AAEE,QAAA,UAAU,EAAEJ,QAFd;AAGE,QAAA,eAAe,EAAEC,QAHnB;AAIE,QAAA,MAAM,EAAEC;AAJV;AAAA;AAAA;AAAA;AAAA;AADF,OAAaE,IAAI,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;KAfeP,e;AAiBhBA,eAAe,CAACQ,SAAhB,GAA4B;AAC1BP,EAAAA,QAAQ,EAAEF,SAAS,CAACU,OAAV,CACRV,SAAS,CAACW,KAAV,CAAgB;AACdC,IAAAA,SAAS,EAAEZ,SAAS,CAACa,IAAV,CAAeC,UADZ;AAEdC,IAAAA,QAAQ,EAAEf,SAAS,CAACgB,MAAV,CAAiBF,UAFb;AAGdG,IAAAA,WAAW,EAAEjB,SAAS,CAACgB,MAAV,CAAiBF,UAHhB;AAIdN,IAAAA,EAAE,EAAER,SAAS,CAACgB,MAAV,CAAiBF,UAJP;AAKdI,IAAAA,IAAI,EAAElB,SAAS,CAACgB,MAAV,CAAiBF,UALT;AAMdK,IAAAA,QAAQ,EAAEnB,SAAS,CAACgB,MAAV,CAAiBF;AANb,GAAhB,CADQ,EASRA,UAVwB;AAW1BX,EAAAA,QAAQ,EAAEH,SAAS,CAACoB,IAAV,CAAeN,UAXC;AAY1BV,EAAAA,QAAQ,EAAEJ,SAAS,CAACoB,IAAV,CAAeN,UAZC;AAa1BT,EAAAA,WAAW,EAAEL,SAAS,CAACqB,QAAV,CAAmBrB,SAAS,CAACgB,MAA7B,EAAqCF;AAbxB,CAA5B","sourcesContent":["import { ListEl, TodoListContainer } from '../styles/TodoList.styled';\nimport TodoEl from './TodoEl';\nimport PropTypes from 'prop-types';\n\nexport function TodoListWrapper({ todoList, onDelete, onToggle, themeColors }) {\n  return (\n    <TodoListContainer>\n      {todoList.map(todo => (\n        <ListEl key={todo.id} colors={themeColors}>\n          <TodoEl\n            todo={todo}\n            deleteTask={onDelete}\n            toggleCompleted={onToggle}\n            colors={themeColors}\n          />\n        </ListEl>\n      ))}\n    </TodoListContainer>\n  );\n}\n\nTodoListWrapper.propTypes = {\n  todoList: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: PropTypes.bool.isRequired,\n      deadline: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      priority: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  themeColors: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}