{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/ListPage/ListPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { LinearProgressStyled, ErrorContainer } from 'components/CommonComponents';\nimport { TextWrapper } from '../../common/components/TextWrapper';\nimport { useFetch } from 'hooks';\nimport { getPublication } from 'services/readerApi';\nimport { useParams } from 'react-router-dom';\nimport { themeContext } from 'context/authContext';\nimport { withApiState } from 'services/ApiState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ListPageNoState = _ref => {\n  _s();\n\n  let {\n    apiState\n  } = _ref;\n  const {\n    mainTheme\n  } = useContext(themeContext);\n  let {\n    publicationId\n  } = useParams();\n  const {\n    state\n  } = useFetch({\n    // custom hooks for fetch requests\n    fetchFunc: getPublication,\n    apiState: apiState,\n    firstRenderCheck: false,\n    initialValue: null,\n    addProp: publicationId\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [apiState.isIdle() && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Publication did not come yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 29\n    }, this), apiState.isPending() && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(LinearProgressStyled, {\n        colors: mainTheme.colors,\n        addFeat: {\n          position: 'fixed',\n          top: '459px',\n          right: '50%',\n          transform: 'translateX(50%)',\n          minWidth: '30%',\n          height: ' 30px',\n          borderRadius: '5px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), apiState.isSuccess() && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: ContainerStyle,\n      children: /*#__PURE__*/_jsxDEV(TextWrapper, {\n        publication: state,\n        colors: mainTheme.colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), apiState.isError() && /*#__PURE__*/_jsxDEV(ErrorContainer, {\n      text: \"Oops we failed sorry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ListPageNoState, \"JT5D+4JKhHxmG3KX0ldUDl95oTo=\", false, function () {\n  return [useParams, useFetch];\n});\n\n_c = ListPageNoState;\nconst ListPage = withApiState(ListPageNoState);\n_c2 = ListPage;\nconst ContainerStyle = {\n  position: 'fixed',\n  top: '400px',\n  right: '50px',\n  minWidth: '1000px'\n};\nexport default ListPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListPageNoState\");\n$RefreshReg$(_c2, \"ListPage\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader/pages/ListPage/ListPage.jsx"],"names":["React","useContext","LinearProgressStyled","ErrorContainer","TextWrapper","useFetch","getPublication","useParams","themeContext","withApiState","ListPageNoState","apiState","mainTheme","publicationId","state","fetchFunc","firstRenderCheck","initialValue","addProp","isIdle","isPending","colors","position","top","right","transform","minWidth","height","borderRadius","display","justifyContent","alignItems","isSuccess","ContainerStyle","isError","ListPage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SACEC,oBADF,EAEEC,cAFF,QAGO,6BAHP;AAIA,SAASC,WAAT,QAA4B,qCAA5B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,YAAT,QAA6B,mBAA7B;;;;AAEA,MAAMC,eAAe,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAgBX,UAAU,CAACO,YAAD,CAAhC;AAEA,MAAI;AAAEK,IAAAA;AAAF,MAAoBN,SAAS,EAAjC;AAEA,QAAM;AAAEO,IAAAA;AAAF,MAAYT,QAAQ,CAAC;AAAE;AAC3BU,IAAAA,SAAS,EAAET,cADc;AAEzBK,IAAAA,QAAQ,EAAEA,QAFe;AAGzBK,IAAAA,gBAAgB,EAAE,KAHO;AAIzBC,IAAAA,YAAY,EAAE,IAJW;AAKzBC,IAAAA,OAAO,EAAEL;AALgB,GAAD,CAA1B;AAQA,sBACE;AAAA,eACGF,QAAQ,CAACQ,MAAT,mBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADxB,EAGGR,QAAQ,CAACS,SAAT,mBACC;AAAA,6BACE,QAAC,oBAAD;AACE,QAAA,MAAM,EAAER,SAAS,CAACS,MADpB;AAEE,QAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAE,OADH;AAEPC,UAAAA,GAAG,EAAE,OAFE;AAGPC,UAAAA,KAAK,EAAE,KAHA;AAIPC,UAAAA,SAAS,EAAE,iBAJJ;AAKPC,UAAAA,QAAQ,EAAE,KALH;AAMPC,UAAAA,MAAM,EAAE,OAND;AAOPC,UAAAA,YAAY,EAAE,KAPP;AAQPC,UAAAA,OAAO,EAAE,MARF;AASPC,UAAAA,cAAc,EAAE,QATT;AAUPC,UAAAA,UAAU,EAAE;AAVL;AAFX;AAAA;AAAA;AAAA;AAAA;AADF,qBAJJ,EAuBGpB,QAAQ,CAACqB,SAAT,mBACC;AAAK,MAAA,KAAK,EAAEC,cAAZ;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,WAAW,EAAEnB,KAA1B;AAAiC,QAAA,MAAM,EAAEF,SAAS,CAACS;AAAnD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxBJ,EA6BGV,QAAQ,CAACuB,OAAT,mBAAsB,QAAC,cAAD;AAAgB,MAAA,IAAI,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,YA7BzB;AAAA,kBADF;AAiCD,CA9CD;;GAAMxB,e;UAGoBH,S,EAENF,Q;;;KALdK,e;AAgDN,MAAMyB,QAAQ,GAAG1B,YAAY,CAACC,eAAD,CAA7B;MAAMyB,Q;AAEN,MAAMF,cAAc,GAAG;AACrBX,EAAAA,QAAQ,EAAE,OADW;AAErBC,EAAAA,GAAG,EAAE,OAFgB;AAGrBC,EAAAA,KAAK,EAAE,MAHc;AAIrBE,EAAAA,QAAQ,EAAE;AAJW,CAAvB;AAOA,eAAeS,QAAf","sourcesContent":["import React, { useContext } from 'react';\n\nimport {\n  LinearProgressStyled,\n  ErrorContainer,\n} from 'components/CommonComponents';\nimport { TextWrapper } from '../../common/components/TextWrapper';\n\nimport { useFetch } from 'hooks';\n\nimport { getPublication } from 'services/readerApi';\n\nimport { useParams } from 'react-router-dom';\n\nimport { themeContext } from 'context/authContext';\nimport { withApiState } from 'services/ApiState';\n\nconst ListPageNoState = ({ apiState }) => {\n  const { mainTheme } = useContext(themeContext);\n\n  let { publicationId } = useParams();\n\n  const { state } = useFetch({ // custom hooks for fetch requests\n    fetchFunc: getPublication,\n    apiState: apiState,\n    firstRenderCheck: false,\n    initialValue: null,\n    addProp: publicationId,\n  });\n\n  return (\n    <>\n      {apiState.isIdle() && <div>Publication did not come yet!</div>}\n\n      {apiState.isPending() && (\n        <>\n          <LinearProgressStyled\n            colors={mainTheme.colors}\n            addFeat={{\n              position: 'fixed',\n              top: '459px',\n              right: '50%',\n              transform: 'translateX(50%)',\n              minWidth: '30%',\n              height: ' 30px',\n              borderRadius: '5px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          />\n        </>\n      )}\n\n      {apiState.isSuccess() && (\n        <div style={ContainerStyle}>\n          <TextWrapper publication={state} colors={mainTheme.colors} />\n        </div>\n      )}\n\n      {apiState.isError() && <ErrorContainer text=\"Oops we failed sorry\" />}\n    </>\n  );\n};\n\nconst ListPage = withApiState(ListPageNoState);\n\nconst ContainerStyle = {\n  position: 'fixed',\n  top: '400px',\n  right: '50px',\n  minWidth: '1000px',\n};\n\nexport default ListPage;\n"]},"metadata":{},"sourceType":"module"}