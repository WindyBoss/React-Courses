{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Controls } from '../components/Reader/Controls';\nimport { Progress } from '../components/Reader/Progress';\nimport { TextWrapper } from '../components/Reader/TextWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LS_KEY = 'reader_item_index';\nexport class Reader extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      index: 0\n    };\n\n    this.changeIndex = value => {\n      const publicationNumber = this.props.publications.length;\n      const {\n        index\n      } = this.state; // use switch to check if the index is last or first\n\n      switch (index + value) {\n        case publicationNumber:\n          this.setState({\n            index: 0\n          });\n          break;\n\n        case -1:\n          this.setState({\n            index: publicationNumber - 1\n          });\n          break;\n\n        default:\n          this.setState(state => ({\n            index: state.index + value\n          }));\n      }\n\n      ;\n    };\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.index !== this.state.index) {\n      localStorage.setItem(LS_KEY, Number(this.state.index)); // -> save index to localStorage\n    }\n\n    ;\n  }\n\n  componentDidMount() {\n    const savedState = localStorage.getItem(LS_KEY); // -> take index from localStorage\n\n    if (savedState) {\n      this.setState({\n        index: Number(savedState)\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    const {\n      colors,\n      publications\n    } = this.props;\n    console.log(publications);\n    console.log(colors);\n    const {\n      index\n    } = this.state;\n    const currentPublication = publications[index];\n    console.log(currentPublication);\n    /*\n    * It is good practice to split DOM tree to small elements, which can good managed\n    */\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: '50%',\n          transform: 'translate(-50%,0)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextWrapper, {\n        publication: currentPublication,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n; // Reader.propTypes = {\n//   publications: PropTypes.arrayOf(PropTypes.shape({\n//     text: PropTypes.string.isRequired,\n//     title: PropTypes.string.isRequired\n//   })).isRequired,\n//   colors: PropTypes.objectOf(PropTypes.string).isRequired,\n// };","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader.jsx"],"names":["React","Component","PropTypes","Controls","Progress","TextWrapper","LS_KEY","Reader","state","index","changeIndex","value","publicationNumber","props","publications","length","setState","componentDidUpdate","_","prevState","localStorage","setItem","Number","componentDidMount","savedState","getItem","render","colors","console","log","currentPublication","position","left","transform"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,WAAT,QAA4B,kCAA5B;;;AAEA,MAAMC,MAAM,GAAG,mBAAf;AAEA,OAAO,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;AAAA;AAAA;AAAA,SACpCO,KADoC,GAC5B;AACNC,MAAAA,KAAK,EAAE;AADD,KAD4B;;AAAA,SAKpCC,WALoC,GAKtBC,KAAK,IAAI;AACrB,YAAMC,iBAAiB,GAAG,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,MAAlD;AACA,YAAM;AAAEN,QAAAA;AAAF,UAAY,KAAKD,KAAvB,CAFqB,CAIrB;;AACA,cAAQC,KAAK,GAAGE,KAAhB;AACE,aAAKC,iBAAL;AACA,eAAKI,QAAL,CAAc;AAAEP,YAAAA,KAAK,EAAE;AAAT,WAAd;AACA;;AACA,aAAK,CAAC,CAAN;AACA,eAAKO,QAAL,CAAc;AAAEP,YAAAA,KAAK,EAAEG,iBAAiB,GAAG;AAA7B,WAAd;AACA;;AACA;AACA,eAAKI,QAAL,CAAcR,KAAK,KAAK;AAAEC,YAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAcE;AAAvB,WAAL,CAAnB;AARF;;AASC;AACF,KApBmC;AAAA;;AAsBpCM,EAAAA,kBAAkB,CAACC,CAAD,EAAIC,SAAJ,EAAe;AAC7B,QAAIA,SAAS,CAACV,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAAnC,EAA0C;AACxCW,MAAAA,YAAY,CAACC,OAAb,CAAqBf,MAArB,EAA6BgB,MAAM,CAAC,KAAKd,KAAL,CAAWC,KAAZ,CAAnC,EADwC,CACgB;AACzD;;AAAA;AACJ;;AAEDc,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,UAAU,GAAGJ,YAAY,CAACK,OAAb,CAAqBnB,MAArB,CAAnB,CADgB,CACiC;;AACjD,QAAIkB,UAAJ,EAAgB;AACd,WAAKR,QAAL,CAAc;AAAEP,QAAAA,KAAK,EAAEa,MAAM,CAACE,UAAD;AAAf,OAAd;AACD;;AAAA;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEC,MAAAA,MAAF;AAAUb,MAAAA;AAAV,QAA2B,KAAKD,KAAtC;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAM;AAAElB,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,UAAMsB,kBAAkB,GAAGhB,YAAY,CAACL,KAAD,CAAvC;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYC,kBAAZ;AACA;AACJ;AACA;;AACI,wBACE;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,QAAQ,EAAE,UAAX;AAAuBC,UAAAA,IAAI,EAAE,KAA7B;AAAoCC,UAAAA,SAAS,EAAE;AAA/C;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAeE,QAAC,WAAD;AACE,QAAA,WAAW,EAAEH,kBADf;AAEE,QAAA,MAAM,EAAEH;AAFV;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA,oBADF;AAsBD;;AApEmC;AAqErC,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Controls } from '../components/Reader/Controls';\nimport { Progress } from '../components/Reader/Progress';\nimport { TextWrapper } from '../components/Reader/TextWrapper';\n\nconst LS_KEY = 'reader_item_index';\n\nexport class Reader extends Component {\n  state = {\n    index: 0,\n  };\n\n  changeIndex = value => {\n    const publicationNumber = this.props.publications.length;\n    const { index } = this.state;\n\n    // use switch to check if the index is last or first\n    switch (index + value) {\n      case publicationNumber:\n      this.setState({ index: 0 });\n      break;\n      case -1:\n      this.setState({ index: publicationNumber - 1 });\n      break;\n      default:\n      this.setState(state => ({ index: state.index + value }));\n    };\n  };\n\n  componentDidUpdate(_, prevState) {\n      if (prevState.index !== this.state.index) {\n        localStorage.setItem(LS_KEY, Number(this.state.index)); // -> save index to localStorage\n      };\n  };\n\n  componentDidMount() {\n      const savedState = localStorage.getItem(LS_KEY); // -> take index from localStorage\n      if (savedState) {\n        this.setState({ index: Number(savedState) });\n      };\n  };\n\n  render() {\n      \n    const { colors, publications } = this.props;\n    console.log(publications)\n    console.log(colors);\n    const { index } = this.state;\n    const currentPublication = publications[index];\n    console.log(currentPublication);\n    /*\n    * It is good practice to split DOM tree to small elements, which can good managed\n    */\n    return (\n      <>\n        <div style={{position: 'absolute', left: '50%', transform: 'translate(-50%,0)'}}>\n          {/* <Controls\n            onClick={this.changeIndex}\n            colors={colors}\n          // index={index}\n          // publicationsLength={publications.length}\n          >\n            <Progress\n              colors={colors}\n              current={index}\n              total={publications.length}\n            />\n          </Controls> */}\n        </div>\n        <TextWrapper\n          publication={currentPublication}\n          colors={colors}\n        />\n      </>\n    );\n  };\n};\n\n\n// Reader.propTypes = {\n//   publications: PropTypes.arrayOf(PropTypes.shape({\n//     text: PropTypes.string.isRequired,\n//     title: PropTypes.string.isRequired\n//   })).isRequired,\n//   colors: PropTypes.objectOf(PropTypes.string).isRequired,\n// };"]},"metadata":{},"sourceType":"module"}