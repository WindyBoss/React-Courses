{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx\",\n    _s = $RefreshSig$();\n\nimport { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\nexport const btnStyles = (_ref, hover) => {\n  let {\n    btnTextColor,\n    btnBgColor,\n    btnBorderColor,\n    hoverBtnColor,\n    hoverBtnBgColor\n  } = _ref;\n  return {\n    color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`,\n    backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n    border: `1px solid ${btnBorderColor}`\n  };\n};\nexport function ButtonStyled(_ref2) {\n  _s();\n\n  let {\n    children,\n    onClick,\n    colors,\n    endIcon,\n    type,\n    disabled\n  } = _ref2;\n  const [hover, setHover] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    style: btnStyles(colors, hover),\n    onPointerOver: () => setHover(true),\n    onPointerOut: () => setHover(false),\n    onClick: onClick,\n    variant: \"contained\",\n    type: type,\n    endIcon: endIcon,\n    disabled: disabled,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ButtonStyled, \"bRXmKus9fOZFlca/6zXTYU+twGY=\");\n\n_c = ButtonStyled;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonStyled\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/globalStyles.jsx"],"names":["createGlobalStyle","Button","useState","GlobalStyle","props","theme","colors","globalBgColor","btnStyles","hover","btnTextColor","btnBgColor","btnBorderColor","hoverBtnColor","hoverBtnBgColor","color","backgroundColor","border","ButtonStyled","children","onClick","endIcon","type","disabled","setHover"],"mappings":";;;AAAA,SAASA,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAGA,OAAO,MAAMC,WAAW,GAAGH,iBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBI,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,aAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCO;AAqCP,OAAO,MAAMC,SAAS,GAAG,OAA6EC,KAA7E,KAAuF;AAAA,MAAtF;AAACC,IAAAA,YAAD;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,cAA3B;AAA2CC,IAAAA,aAA3C;AAA0DC,IAAAA;AAA1D,GAAsF;AAC5G,SACE;AACEC,IAAAA,KAAK,EAAE,CAACN,KAAD,GAAU,GAAEC,YAAa,EAAzB,GAA8B,GAAEG,aAAc,EADvD;AAEEG,IAAAA,eAAe,EAAE,CAACP,KAAD,GAAU,GAAEE,UAAW,EAAvB,GAA4B,GAAEG,eAAgB,EAFjE;AAGEG,IAAAA,MAAM,EAAG,aAAYL,cAAe;AAHtC,GADF;AAOH,CARM;AAWP,OAAO,SAASM,YAAT,QAA6E;AAAA;;AAAA,MAAtD;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBd,IAAAA,MAApB;AAA4Be,IAAAA,OAA5B;AAAqCC,IAAAA,IAArC;AAA2CC,IAAAA;AAA3C,GAAsD;AACjF,QAAM,CAACd,KAAD,EAAQe,QAAR,IAAoBtB,QAAQ,CAAC,KAAD,CAAlC;AACA,sBACC,QAAC,MAAD;AACE,IAAA,KAAK,EAAEM,SAAS,CAACF,MAAD,EAASG,KAAT,CADlB;AAEE,IAAA,aAAa,EAAE,MAAKe,QAAQ,CAAC,IAAD,CAF9B;AAGE,IAAA,YAAY,EAAE,MAAMA,QAAQ,CAAC,KAAD,CAH9B;AAIE,IAAA,OAAO,EAAEJ,OAJX;AAKE,IAAA,OAAO,EAAC,WALV;AAME,IAAA,IAAI,EAAEE,IANR;AAOE,IAAA,OAAO,EAAED,OAPX;AAQE,IAAA,QAAQ,EAAEE,QARZ;AAAA,cAUGJ;AAVH;AAAA;AAAA;AAAA;AAAA,UADD;AAcF;;GAhBeD,Y;;KAAAA,Y","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport Button from '@mui/material/Button';\nimport { useState } from 'react';\n\n\nexport const GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  }\n  html {\n    scroll-behavior: smooth;\n  }\n  body {\n    background-color: ${props => props.theme.colors.globalBgColor};\n    min-height: 100vh;\n    margin: 0;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu',\n    'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    line-height: 1.5;\n    scroll-behavior: smooth;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    margin: 0;\n  }\n`;\n\n\nexport const btnStyles = ({btnTextColor, btnBgColor, btnBorderColor, hoverBtnColor, hoverBtnBgColor}, hover) => {\n    return (\n      {\n        color: !hover ? `${btnTextColor}` : `${hoverBtnColor}`, \n        backgroundColor: !hover ? `${btnBgColor}` : `${hoverBtnBgColor}`,\n        border: `1px solid ${btnBorderColor}`,\n      }\n    );\n};\n\n\nexport function ButtonStyled ({children, onClick, colors, endIcon, type, disabled}) {\n   const [hover, setHover] = useState(false);  \n   return (\n    <Button\n      style={btnStyles(colors, hover)}\n      onPointerOver={()=> setHover(true)}\n      onPointerOut={() => setHover(false)}\n      onClick={onClick}\n      variant=\"contained\" \n      type={type}\n      endIcon={endIcon}\n      disabled={disabled}\n    >\n      {children}\n    </Button>\n  )\n}"]},"metadata":{},"sourceType":"module"}