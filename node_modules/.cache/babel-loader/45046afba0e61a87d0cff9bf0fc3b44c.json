{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Player/Player.jsx\";\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledPlayer, PlayerPlace, LoaderText } from './Player.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Player extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isVideoLoaded: false\n    };\n  }\n\n  /*\n  * use componentDidMount with checking conditions, otherwise it will cause infinite function repeats or state change and your page will fall\n  */\n  componentDidUpdate(prevProps) {\n    if (prevProps.url !== this.props.url) {\n      this.setState({\n        isVideoLoaded: false\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    const {\n      isVideoLoaded\n    } = this.state;\n    const {\n      url,\n      colors\n    } = this.props;\n    const showLoader = url && !isVideoLoaded;\n    const playerWidth = isVideoLoaded ? '100%' : 0;\n    const playerHeight = isVideoLoaded ? '100%' : 0;\n    return /*#__PURE__*/_jsxDEV(PlayerPlace, {\n      colors: colors,\n      children: [showLoader && /*#__PURE__*/_jsxDEV(LoaderText, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 24\n      }, this), url && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(StyledPlayer, {\n          url: url // ReactPlayer needs only the video url\n          ,\n          width: playerWidth // -> ReactPlayer parametr\n          ,\n          height: playerHeight // -> ReactPlayer parametr\n          ,\n          onReady: () => this.setState({\n            isVideoLoaded: true\n          }) // -> method of library ReactPlayer, which helps to follow if the video is loaded and change the state\n          ,\n          controls: true // -> show the controls of the ReactPlayer\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nPlayer.defaultProps = {\n  url: ''\n};\n;\n/*\n* Use Proptypes for checking type of props data of the component\n*/\n\nPlayer.propTypes = {\n  url: PropTypes.string.isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired\n};","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/Player/Player.jsx"],"names":["Component","PropTypes","StyledPlayer","PlayerPlace","LoaderText","Player","state","isVideoLoaded","componentDidUpdate","prevProps","url","props","setState","render","colors","showLoader","playerWidth","playerHeight","defaultProps","propTypes","string","isRequired","objectOf"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,UAApC,QAAsD,iBAAtD;;;AAEA,OAAO,MAAMC,MAAN,SAAqBL,SAArB,CAA+B;AAAA;AAAA;AAAA,SACpCM,KADoC,GAC5B;AACNC,MAAAA,aAAa,EAAE;AADT,KAD4B;AAAA;;AAYpC;AACF;AACA;AAEEC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAIA,SAAS,CAACC,GAAV,KAAkB,KAAKC,KAAL,CAAWD,GAAjC,EAAsC;AACpC,WAAKE,QAAL,CAAc;AAAEL,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD;;AAAA;AACF;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,UAAM;AAAEI,MAAAA,GAAF;AAAOI,MAAAA;AAAP,QAAkB,KAAKH,KAA7B;AAEA,UAAMI,UAAU,GAAGL,GAAG,IAAI,CAACH,aAA3B;AACA,UAAMS,WAAW,GAAGT,aAAa,GAAG,MAAH,GAAY,CAA7C;AACA,UAAMU,YAAY,GAAGV,aAAa,GAAG,MAAH,GAAY,CAA9C;AAEA,wBACE,QAAC,WAAD;AAAc,MAAA,MAAM,EAAEO,MAAtB;AAAA,iBACGC,UAAU,iBAAI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADjB,EAEGL,GAAG,iBACF;AAAA,+BACE,QAAC,YAAD;AACE,UAAA,GAAG,EAAEA,GADP,CACY;AADZ;AAEE,UAAA,KAAK,EAAEM,WAFT,CAEsB;AAFtB;AAGE,UAAA,MAAM,EAAEC,YAHV,CAGwB;AAHxB;AAIE,UAAA,OAAO,EAAE,MAAM,KAAKL,QAAL,CAAc;AAAEL,YAAAA,aAAa,EAAE;AAAjB,WAAd,CAJjB,CAIyD;AAJzD;AAKE,UAAA,QAAQ,MALV,CAKW;;AALX;AAAA;AAAA;AAAA;AAAA;AADF,uBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA9CmC;AAAzBF,M,CAQJa,Y,GAAe;AACpBR,EAAAA,GAAG,EAAE;AADe,C;AAuCvB;AAGD;AACA;AACA;;AAEAL,MAAM,CAACc,SAAP,GAAmB;AACjBT,EAAAA,GAAG,EAAET,SAAS,CAACmB,MAAV,CAAiBC,UADL;AAEjBP,EAAAA,MAAM,EAAEb,SAAS,CAACqB,QAAV,CAAmBrB,SAAS,CAACmB,MAA7B,EAAqCC;AAF5B,CAAnB","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { StyledPlayer, PlayerPlace, LoaderText } from './Player.styled';\n\nexport class Player extends Component {\n  state = {\n    isVideoLoaded: false,\n  };\n\n  /*\n  * Is use for setting default props\n  */\n  static defaultProps = {\n    url: ''\n  }\n\n  /*\n  * use componentDidMount with checking conditions, otherwise it will cause infinite function repeats or state change and your page will fall\n  */\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.url !== this.props.url) {\n      this.setState({ isVideoLoaded: false });\n    };\n  };\n\n  render() {\n    const { isVideoLoaded } = this.state;\n    const { url, colors } = this.props;\n\n    const showLoader = url && !isVideoLoaded;\n    const playerWidth = isVideoLoaded ? '100%' : 0;\n    const playerHeight = isVideoLoaded ? '100%' : 0;\n\n    return (\n      <PlayerPlace  colors={colors}>\n        {showLoader && <LoaderText>Loading...</LoaderText>}\n        {url && (\n          <>\n            <StyledPlayer\n              url={url} // ReactPlayer needs only the video url\n              width={playerWidth} // -> ReactPlayer parametr\n              height={playerHeight} // -> ReactPlayer parametr\n              onReady={() => this.setState({ isVideoLoaded: true })} // -> method of library ReactPlayer, which helps to follow if the video is loaded and change the state\n              controls // -> show the controls of the ReactPlayer\n            />\n          </>\n        )}\n      </PlayerPlace>\n    );\n  };\n};\n\n\n/*\n* Use Proptypes for checking type of props data of the component\n*/\n\nPlayer.propTypes = {\n  url: PropTypes.string.isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired,\n};"]},"metadata":{},"sourceType":"module"}