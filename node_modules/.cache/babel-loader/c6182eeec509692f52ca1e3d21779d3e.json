{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: 0\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    // increment: state => {\n    //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n    //     // doesn't actually mutate the state because it uses the Immer library,\n    //     // which detects changes to a \"draft state\" and produces a brand new\n    //     // immutable state based off those changes\n    //     state.value += 1;\n    // },\n    // decrement: state => {\n    //     state.value -= 1;\n    // },\n    // incrementByAmount: (state, action) => {\n    //     state.value += action.payload;\n    // },\n    changeValue: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.value += payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  changeValue\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/counter/counterSlice.js"],"names":["createSlice","initialState","value","counterSlice","name","reducers","changeValue","state","payload","increment","decrement","incrementByAmount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACpCI,EAAAA,IAAI,EAAE,SAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,IAAAA,WAAW,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACjCD,MAAAA,KAAK,CAACL,KAAN,IAAeM,OAAf;AACH;AAjBK;AAH0B,CAAD,CAAhC,C,CAwBP;;AACA,OAAO,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,iBAAxB;AAA2CL,EAAAA;AAA3C,IACbH,YAAY,CAACS,OADN;AAGP,eAAeT,YAAY,CAACU,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    value: 0,\n};\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        // increment: state => {\n        //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        //     // doesn't actually mutate the state because it uses the Immer library,\n        //     // which detects changes to a \"draft state\" and produces a brand new\n        //     // immutable state based off those changes\n        //     state.value += 1;\n        // },\n        // decrement: state => {\n        //     state.value -= 1;\n        // },\n        // incrementByAmount: (state, action) => {\n        //     state.value += action.payload;\n        // },\n\n        changeValue: (state, { payload }) => {\n            state.value += payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount, changeValue } =\ncounterSlice.actions;\n\nexport default counterSlice.reducer;"]},"metadata":{},"sourceType":"module"}