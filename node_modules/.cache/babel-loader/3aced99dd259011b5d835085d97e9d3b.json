{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Controls } from '../components/Reader/Controls';\nimport { Progress } from '../components/Reader/Progress';\nimport { TextWrapper } from '../components/Reader/TextWrapper';\nimport { themeContext } from \"context/authContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LS_KEY = 'reader_item_index';\n\nclass ReaderClass extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      index: 0\n    };\n\n    this.changeIndex = value => {\n      const publicationNumber = this.props.publications.length;\n      const {\n        index\n      } = this.state; // use switch to check if the index is last or first\n\n      switch (index + value) {\n        case publicationNumber:\n          this.setState({\n            index: 0\n          });\n          break;\n\n        case -1:\n          this.setState({\n            index: publicationNumber - 1\n          });\n          break;\n\n        default:\n          this.setState(state => ({\n            index: state.index + value\n          }));\n      }\n\n      ;\n    };\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.index !== this.state.index) {\n      localStorage.setItem(LS_KEY, Number(this.state.index)); // -> save index to localStorage\n    }\n\n    ;\n  }\n\n  componentDidMount() {\n    const savedState = localStorage.getItem(LS_KEY); // -> take index from localStorage\n\n    if (savedState) {\n      this.setState({\n        index: Number(savedState)\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    const {\n      colors,\n      publications\n    } = this.props;\n    const {\n      index\n    } = this.state;\n    const currentPublication = publications[index];\n    /*\n    * It is good practice to split DOM tree to small elements, which can good managed\n    */\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          left: '50%',\n          transform: 'translate(-50%,0)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Controls, {\n          onClick: this.changeIndex,\n          colors: colors // index={index}\n          // publicationsLength={publications.length}\n          ,\n          children: /*#__PURE__*/_jsxDEV(Progress, {\n            colors: colors,\n            current: index,\n            total: publications.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextWrapper, {\n        publication: currentPublication,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\n;\n\nconst ReaderHooks = _ref => {\n  _s();\n\n  let {\n    publications\n  } = _ref;\n  const [index, setIndex] = useState(() => {\n    const savedState = localStorage.getItem(LS_KEY);\n\n    if (savedState) {\n      setIndex(Number(savedState));\n    }\n\n    ;\n  });\n\n  const changeIndex = value => {\n    const publicationNumber = publications.length; // use switch to check if the index is last or first\n\n    switch (index + value) {\n      case publicationNumber:\n        setIndex(0);\n        break;\n\n      case -1:\n        setIndex(publicationNumber - 1);\n        break;\n\n      default:\n        setIndex(prevState => prevState + value);\n    }\n\n    ;\n  }; // useEffect(() => {\n  //   const savedState = localStorage.getItem(LS_KEY);\n  //   if (savedState) {\n  //     setIndex(Number(savedState));\n  //   };\n  // },[])\n\n\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, Number(index));\n  }, [index]);\n  const currentPublication = publications[index];\n  return /*#__PURE__*/_jsxDEV(themeContext.Consumer, {\n    children: _ref2 => {\n      let {\n        mainTheme\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            left: '50%',\n            transform: 'translate(-50%,0)'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controls, {\n            onClick: changeIndex,\n            colors: mainTheme.colors // index={index}\n            // publicationsLength={publications.length}\n            ,\n            children: /*#__PURE__*/_jsxDEV(Progress, {\n              colors: mainTheme.colors,\n              current: index,\n              total: publications.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(TextWrapper, {\n          publication: currentPublication,\n          colors: mainTheme.colors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReaderHooks, \"pHLwwsKEH+0/QOgAv74b+ss++qs=\");\n\n_c = ReaderHooks;\nexport const Reader = _ref3 => {\n  let {\n    publications,\n    colors\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReaderHooks, {\n      publications: publications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Reader;\nReader.propTypes = {\n  publications: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })).isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReaderHooks\");\n$RefreshReg$(_c2, \"Reader\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Reader.jsx"],"names":["React","Component","useState","useEffect","PropTypes","Controls","Progress","TextWrapper","themeContext","LS_KEY","ReaderClass","state","index","changeIndex","value","publicationNumber","props","publications","length","setState","componentDidUpdate","_","prevState","localStorage","setItem","Number","componentDidMount","savedState","getItem","render","colors","currentPublication","position","left","transform","ReaderHooks","setIndex","mainTheme","Reader","propTypes","arrayOf","shape","text","string","isRequired","title","objectOf"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Controls } from '../components/Reader/Controls';\nimport { Progress } from '../components/Reader/Progress';\nimport { TextWrapper } from '../components/Reader/TextWrapper';\n\nimport { themeContext } from \"context/authContext\";\n\nconst LS_KEY = 'reader_item_index';\n\nclass ReaderClass extends Component {\n  state = {\n    index: 0,\n  };\n\n  changeIndex = value => {\n    const publicationNumber = this.props.publications.length;\n    const { index } = this.state;\n\n    // use switch to check if the index is last or first\n    switch (index + value) {\n      case publicationNumber:\n      this.setState({ index: 0 });\n      break;\n      case -1:\n      this.setState({ index: publicationNumber - 1 });\n      break;\n      default:\n      this.setState(state => ({ index: state.index + value }));\n    };\n  };\n\n  componentDidUpdate(_, prevState) {\n      if (prevState.index !== this.state.index) {\n        localStorage.setItem(LS_KEY, Number(this.state.index)); // -> save index to localStorage\n      };\n  };\n\n  componentDidMount() {\n      const savedState = localStorage.getItem(LS_KEY); // -> take index from localStorage\n      if (savedState) {\n        this.setState({ index: Number(savedState) });\n      };\n  };\n\n  render() {\n    const { colors, publications } = this.props;\n    const { index } = this.state;\n    const currentPublication = publications[index];\n\n    /*\n    * It is good practice to split DOM tree to small elements, which can good managed\n    */\n    return (\n      <>\n        <div style={{position: 'absolute', left: '50%', transform: 'translate(-50%,0)'}}>\n          <Controls\n            onClick={this.changeIndex}\n            colors={colors}\n          // index={index}\n          // publicationsLength={publications.length}\n          >\n            <Progress\n              colors={colors}\n              current={index}\n              total={publications.length}\n            />\n          </Controls>\n        </div>\n        <TextWrapper\n          publication={currentPublication}\n          colors={colors}\n        />\n      </>\n    );\n  };\n};\n\n\n\nconst ReaderHooks = ({publications}) => {\n  const [index, setIndex] = useState(() => {\n    const savedState = localStorage.getItem(LS_KEY);\n    if (savedState) {\n      setIndex(Number(savedState));\n    };\n  });\n\n  const changeIndex = value => {\n    const publicationNumber = publications.length;\n\n    // use switch to check if the index is last or first\n    switch (index + value) {\n      case publicationNumber:\n        setIndex(0)\n      break;\n      case -1:\n        setIndex(publicationNumber - 1)\n      break;\n      default:\n        setIndex(prevState => prevState + value)\n    };\n  };\n\n  // useEffect(() => {\n  //   const savedState = localStorage.getItem(LS_KEY);\n  //   if (savedState) {\n  //     setIndex(Number(savedState));\n  //   };\n  // },[])\n\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, Number(index)); \n  },[index])\n\n  const currentPublication = publications[index];\n\n  return (\n    <themeContext.Consumer>\n    {({mainTheme}) => (\n    <>\n      <div style={{position: 'absolute', left: '50%', transform: 'translate(-50%,0)'}}>\n        <Controls\n          onClick={changeIndex}\n          colors={mainTheme.colors}\n          // index={index}\n          // publicationsLength={publications.length}\n          >\n          <Progress\n            colors={mainTheme.colors}\n            current={index}\n            total={publications.length}\n          />\n        </Controls>\n      </div>\n      <TextWrapper\n        publication={currentPublication}\n        colors={mainTheme.colors}\n      />\n    </>\n    )}\n    </themeContext.Consumer>    \n  );\n};\n\n\nexport const Reader = ({publications, colors}) => {\n  return (\n    <div>\n      {/* <ReaderClass publications={publications} colors={colors}/> */}\n      <ReaderHooks publications={publications}/>\n    </div>\n  )\n}\n\nReader.propTypes = {\n  publications: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  })).isRequired,\n  colors: PropTypes.objectOf(PropTypes.string).isRequired,\n};"]},"metadata":{},"sourceType":"module"}