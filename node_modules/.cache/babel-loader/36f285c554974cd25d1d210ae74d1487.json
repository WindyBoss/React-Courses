{"ast":null,"code":"import { createAction, createReducer } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nconst initialState = [];\n\nfunction addTodoPrepare(_ref) {\n  let {\n    name,\n    description,\n    deadline,\n    priority\n  } = _ref;\n  return {\n    payload: {\n      name: name,\n      deadline: deadline,\n      description: description,\n      id: nanoid(),\n      completed: false,\n      priority: priority\n    }\n  };\n}\n\nconst addTodo = createAction('todos/addTodo', addTodoPrepare);\nconst deleteTodo = createAction('todos/deleteTodo');\nconst toggleTodo = createAction('todos/toggleTodo');\nconst filterTodo = createAction('todos/filterTodo'); // export const todoReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addTodo, (state, { payload }) => {\n//             state.push(payload);\n//         })\n//         .addCase(deleteTodo, (state, { payload }) => [\n//             ...state.filter(({ id }) => id !== payload),\n//         ])\n//         .addCase(toggleTodo, (state, { payload }) =>\n//             state.map(todo =>\n//                 todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//             )\n//         )\n//         .addDefaultCase(state => {\n//             return state;\n//         });\n// });\n//   function getTodos() {\n//     const normalizedFilter = filter.toLowerCase();\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.toLowerCase().includes(normalizedFilter) ||\n//         todo.description.toLowerCase().includes(normalizedFilter)\n//     );\n//   }\n\nexport const todoReducer = createReducer(initialState, {\n  [addTodo]: (state, _ref2) => {\n    let {\n      payload\n    } = _ref2;\n    state.push(payload);\n  },\n  [deleteTodo]: (state, _ref3) => {\n    let {\n      payload\n    } = _ref3;\n    return [...state.filter(_ref4 => {\n      let {\n        id\n      } = _ref4;\n      return id !== payload;\n    })];\n  },\n  [toggleTodo]: (state, _ref5) => {\n    let {\n      payload\n    } = _ref5;\n    return state.map(todo => todo.id === payload ? { ...todo,\n      completed: !todo.completed\n    } : todo);\n  } // [filterTodo]: (state, { payload }) => {\n  //     return state.filter\n  //  }\n\n});\nexport { addTodo, deleteTodo, toggleTodo };","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/redux/todos/todoReducer.js"],"names":["createAction","createReducer","nanoid","initialState","addTodoPrepare","name","description","deadline","priority","payload","id","completed","addTodo","deleteTodo","toggleTodo","filterTodo","todoReducer","state","push","filter","map","todo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,MAAMC,YAAY,GAAG,EAArB;;AAEA,SAASC,cAAT,OAAmE;AAAA,MAA3C;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,GAA2C;AAC/D,SAAO;AACHC,IAAAA,OAAO,EAAE;AACLJ,MAAAA,IAAI,EAAEA,IADD;AAELE,MAAAA,QAAQ,EAAEA,QAFL;AAGLD,MAAAA,WAAW,EAAEA,WAHR;AAILI,MAAAA,EAAE,EAAER,MAAM,EAJL;AAKLS,MAAAA,SAAS,EAAE,KALN;AAMLH,MAAAA,QAAQ,EAAEA;AANL;AADN,GAAP;AAUH;;AAED,MAAMI,OAAO,GAAGZ,YAAY,CAAC,eAAD,EAAkBI,cAAlB,CAA5B;AACA,MAAMS,UAAU,GAAGb,YAAY,CAAC,kBAAD,CAA/B;AACA,MAAMc,UAAU,GAAGd,YAAY,CAAC,kBAAD,CAA/B;AACA,MAAMe,UAAU,GAAGf,YAAY,CAAC,kBAAD,CAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMgB,WAAW,GAAGf,aAAa,CAACE,YAAD,EAAe;AACnD,GAACS,OAAD,GAAW,CAACK,KAAD,YAAwB;AAAA,QAAhB;AAAER,MAAAA;AAAF,KAAgB;AAC/BQ,IAAAA,KAAK,CAACC,IAAN,CAAWT,OAAX;AACH,GAHkD;AAInD,GAACI,UAAD,GAAc,CAACI,KAAD,YAAwB;AAAA,QAAhB;AAAER,MAAAA;AAAF,KAAgB;AAClC,WAAO,CAAC,GAAGQ,KAAK,CAACE,MAAN,CAAa;AAAA,UAAC;AAAET,QAAAA;AAAF,OAAD;AAAA,aAAYA,EAAE,KAAKD,OAAnB;AAAA,KAAb,CAAJ,CAAP;AACH,GANkD;AAOnD,GAACK,UAAD,GAAc,CAACG,KAAD,YAAwB;AAAA,QAAhB;AAAER,MAAAA;AAAF,KAAgB;AAClC,WAAOQ,KAAK,CAACG,GAAN,CAAUC,IAAI,IACjBA,IAAI,CAACX,EAAL,KAAYD,OAAZ,GAAsB,EAAC,GAAGY,IAAJ;AAAUV,MAAAA,SAAS,EAAE,CAACU,IAAI,CAACV;AAA3B,KAAtB,GAA+DU,IAD5D,CAAP;AAGH,GAXkD,CAYnD;AACA;AACA;;AAdmD,CAAf,CAAjC;AAiBP,SAAST,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B","sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nconst initialState = [];\n\nfunction addTodoPrepare({ name, description, deadline, priority }) {\n    return {\n        payload: {\n            name: name,\n            deadline: deadline,\n            description: description,\n            id: nanoid(),\n            completed: false,\n            priority: priority,\n        },\n    };\n}\n\nconst addTodo = createAction('todos/addTodo', addTodoPrepare);\nconst deleteTodo = createAction('todos/deleteTodo');\nconst toggleTodo = createAction('todos/toggleTodo');\nconst filterTodo = createAction('todos/filterTodo');\n\n// export const todoReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addTodo, (state, { payload }) => {\n//             state.push(payload);\n//         })\n//         .addCase(deleteTodo, (state, { payload }) => [\n//             ...state.filter(({ id }) => id !== payload),\n//         ])\n//         .addCase(toggleTodo, (state, { payload }) =>\n//             state.map(todo =>\n//                 todo.id === payload ? {...todo, completed: !todo.completed } : todo\n//             )\n//         )\n//         .addDefaultCase(state => {\n//             return state;\n//         });\n// });\n\n//   function getTodos() {\n//     const normalizedFilter = filter.toLowerCase();\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.toLowerCase().includes(normalizedFilter) ||\n//         todo.description.toLowerCase().includes(normalizedFilter)\n//     );\n//   }\n\nexport const todoReducer = createReducer(initialState, {\n    [addTodo]: (state, { payload }) => {\n        state.push(payload);\n    },\n    [deleteTodo]: (state, { payload }) => {\n        return [...state.filter(({ id }) => id !== payload)];\n    },\n    [toggleTodo]: (state, { payload }) => {\n        return state.map(todo =>\n            todo.id === payload ? {...todo, completed: !todo.completed } : todo\n        );\n    },\n    // [filterTodo]: (state, { payload }) => {\n    //     return state.filter\n    //  }\n});\n\nexport { addTodo, deleteTodo, toggleTodo };"]},"metadata":{},"sourceType":"module"}