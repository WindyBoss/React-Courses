{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/components/ColorPicker/ButtonList.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from \"./ColorPicker.styled\";\nimport { ButtonStyled } from 'components/globalStyles';\nimport { themeContext } from '../../context/authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ButtonList(_ref) {\n  let {\n    options,\n    setActiveIdx\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(themeContext.Consumer, {\n    children: _ref2 => {\n      let {\n        mainTheme\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-flex',\n          marginLeft: '50%',\n          transform: 'translateX(-50%)'\n        },\n        children: options.map((_ref3, index) => {\n          let {\n            label,\n            color\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(ButtonStyled, {\n            onClick: () => setActiveIdx(index),\n            colors: mainTheme.colors,\n            btnBgColor: color,\n            addFeat: {\n              marginRight: '10px'\n            },\n            children: label\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 7\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_c = ButtonList;\n;\nButtonList.propTypes = {\n  setActiveIdx: PropTypes.func.isRequired,\n  options: PropTypes.array.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonList\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/components/ColorPicker/ButtonList.jsx"],"names":["React","PropTypes","Button","ButtonStyled","themeContext","ButtonList","options","setActiveIdx","mainTheme","display","marginLeft","transform","map","index","label","color","colors","marginRight","propTypes","func","isRequired","array"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AAGA,eAAe,SAASC,UAAT,OAA6C;AAAA,MAAzB;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAyB;AAC1D,sBACE,QAAC,YAAD,CAAc,QAAd;AAAA,cACC;AAAA,UAAC;AAACC,QAAAA;AAAD,OAAD;AAAA,0BACD;AAAK,QAAA,KAAK,EAAE;AACVC,UAAAA,OAAO,EAAE,aADC;AAEVC,UAAAA,UAAU,EAAE,KAFF;AAGVC,UAAAA,SAAS,EAAE;AAHD,SAAZ;AAAA,kBAKIL,OAAO,CAACM,GAAR,CAAY,QAAiBC,KAAjB;AAAA,cAAC;AAACC,YAAAA,KAAD;AAAQC,YAAAA;AAAR,WAAD;AAAA,8BACd,QAAC,YAAD;AAEE,YAAA,OAAO,EAAE,MAAMR,YAAY,CAACM,KAAD,CAF7B;AAGE,YAAA,MAAM,EAAEL,SAAS,CAACQ,MAHpB;AAIE,YAAA,UAAU,EAAED,KAJd;AAKE,YAAA,OAAO,EAAG;AAAEE,cAAAA,WAAW,EAAE;AAAf,aALZ;AAAA,sBAOGH;AAPH,aACOA,KADP;AAAA;AAAA;AAAA;AAAA,kBADc;AAAA,SAAZ;AALJ;AAAA;AAAA;AAAA;AAAA,cADC;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;KAxBuBT,U;AAwBvB;AAEDA,UAAU,CAACa,SAAX,GAAuB;AACrBX,EAAAA,YAAY,EAAEN,SAAS,CAACkB,IAAV,CAAeC,UADR;AAErBd,EAAAA,OAAO,EAAEL,SAAS,CAACoB,KAAV,CAAgBD;AAFJ,CAAvB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from \"./ColorPicker.styled\";\n\nimport { ButtonStyled } from 'components/globalStyles';\nimport { themeContext } from '../../context/authContext'\n\n\nexport default function ButtonList({options, setActiveIdx}) {\n  return (\n    <themeContext.Consumer>\n    {({mainTheme}) => (  \n    <div style={{\n      display: 'inline-flex',\n      marginLeft: '50%',\n      transform: 'translateX(-50%)'\n    }}>\n      { options.map(({label, color}, index) => (\n      <ButtonStyled\n        key={label}\n        onClick={() => setActiveIdx(index)}\n        colors={mainTheme.colors}\n        btnBgColor={color}\n        addFeat={ { marginRight: '10px' } }\n        >\n        {label}  \n      </ButtonStyled>\n      ))}\n    </div>\n    )}\n    </themeContext.Consumer>      \n  );\n};\n\nButtonList.propTypes = {\n  setActiveIdx: PropTypes.func.isRequired,\n  options: PropTypes.array.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}