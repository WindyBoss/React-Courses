{"ast":null,"code":"var _jsxFileName = \"/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/Todos.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTodoRequest, fetchTodoSuccess, fetchTodoError, addTodoRequest, addTodoSuccess, addTodoError, deleteTodoRequest, deleteTodoSuccess, deleteTodoError, toggleCompleteRequest, toggleCompleteSuccess, toggleCompleteError } from 'redux/todos/todoActions';\nimport { getTodos } from 'service/apiService';\nimport { TodoListWrapper } from './components/TodoListWrapper';\nimport TodoFilter from './components/TodoFilter';\nimport TodoEditor from './components/TodoEditor';\nimport ModalWindow from 'components/ModalWindow';\nimport { StyledList, HeaderTextContainer, Text } from './styles/TodoList.styled';\nimport { themeContext } from 'context/themeContext';\nimport { ButtonStyled } from 'components/CommonComponents';\nimport CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\nimport { useModal } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Todos() {\n  _s();\n\n  const [showModal, toggleModal] = useModal(false);\n  const listRef = /*#__PURE__*/React.createRef();\n  /*\n   * useDispatch - connect actions with active UI elements\n   * useSelector - returns state elements\n   */\n\n  const dispatch = useDispatch();\n  const storeTodos = useSelector(state => state.todoList.todos);\n  const filter = useSelector(state => state.todoList.filter);\n  const completedTasksNumber = storeTodos ? storeTodos.reduce((acc, todo) => todo.completed ? acc + 1 : acc, 0) : 0;\n\n  const filterTasks = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  console.log(getTodos());\n\n  const deleteTask = taskId => {\n    dispatch(deleteTodo(taskId));\n  };\n\n  const toggleCompleted = taskId => {\n    dispatch(toggleTodo(taskId));\n  };\n\n  const filterTodos = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return storeTodos.filter(todo => todo.name.includes(normalizedFilter) || todo.description.includes(normalizedFilter));\n  };\n\n  const addTask = _ref => {\n    let {\n      name,\n      description,\n      deadline,\n      priority\n    } = _ref;\n\n    /*\n     * action must be called inside useDispatch, which transport action to reducer factory\n     */\n    dispatch(addTodo({\n      name: name,\n      deadline: deadline,\n      description: description,\n      priority: priority\n    }));\n  };\n\n  return storeTodos ? /*#__PURE__*/_jsxDEV(TodoContainer, {\n    listRef: listRef,\n    completedTasksNumber: completedTasksNumber,\n    todos: filterTodos(),\n    filterTasks: filterTasks,\n    toggleModal: toggleModal,\n    deleteTask: deleteTask,\n    toggleCompleted: toggleCompleted,\n    addTask: addTask,\n    showModal: showModal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Todos, \"2UtDF8kLF1/IAUcATnS9sdEt+U4=\", false, function () {\n  return [useModal, useDispatch, useSelector, useSelector];\n});\n\n_c = Todos;\n\nfunction TodoContainer(_ref2) {\n  _s2();\n\n  let {\n    listRef,\n    completedTasksNumber,\n    todos,\n    filterTasks,\n    toggleModal,\n    deleteTask,\n    toggleCompleted,\n    addTask,\n    showModal\n  } = _ref2;\n  const {\n    mainTheme\n  } = useContext(themeContext);\n  return /*#__PURE__*/_jsxDEV(StyledList, {\n    ref: listRef,\n    children: [/*#__PURE__*/_jsxDEV(HeaderTextContainer, {\n      colors: mainTheme.colors,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Year Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Completed: \", completedTasksNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Total: \", todos.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoFilter, {\n        colors: mainTheme.colors,\n        onChange: filterTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonStyled, {\n        colors: mainTheme.colors,\n        onClick: toggleModal,\n        \"aria-label\": \"showModal\",\n        endIcon: /*#__PURE__*/_jsxDEV(CreateTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 20\n        }, this),\n        addFeat: {\n          position: 'absolute',\n          right: '10px',\n          top: '10px'\n        },\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoListWrapper, {\n      todoList: todos,\n      onDelete: deleteTask,\n      onToggle: toggleCompleted,\n      themeColors: mainTheme.colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(ModalWindow, {\n      todolist: \"todolist\",\n      onSubmit: addTask,\n      onClick: toggleModal,\n      mainTheme: mainTheme,\n      children: /*#__PURE__*/_jsxDEV(TodoEditor, {\n        colors: mainTheme.colors,\n        onSubmit: addTask,\n        onClick: toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TodoContainer, \"6O+QO+COAUPkhIjn1biEpC1Pcjc=\");\n\n_c2 = TodoContainer;\nexport default Todos; // import React, { useContext, useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   addTodo,\n//   deleteTodo,\n//   toggleTodo,\n//   setFilter,\n// } from 'redux/todos/todoSlice';\n// import { getTodos } from 'service/apiService';\n// import { TodoListWrapper } from './components/TodoListWrapper';\n// import TodoFilter from './components/TodoFilter';\n// import TodoEditor from './components/TodoEditor';\n// import ModalWindow from 'components/ModalWindow';\n// import {\n//   StyledList,\n//   HeaderTextContainer,\n//   Text,\n// } from './styles/TodoList.styled';\n// import { themeContext } from 'context/themeContext';\n// import { ButtonStyled } from 'components/CommonComponents';\n// import CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n// import { useModal } from 'hooks';\n// function Todos() {\n//   const [showModal, toggleModal] = useModal(false);\n//   const listRef = React.createRef();\n//   /*\n//    * useDispatch - connect actions with active UI elements\n//    * useSelector - returns state elements\n//    */\n//   const dispatch = useDispatch();\n//   const storeTodos = useSelector(state => state.todoList.todos);\n//   const filter = useSelector(state => state.todoList.filter);\n//   const completedTasksNumber = storeTodos\n//     ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n//     : 0;\n//   const filterTasks = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n//   console.log(getTodos());\n//   const deleteTask = taskId => {\n//     dispatch(deleteTodo(taskId));\n//   };\n//   const toggleCompleted = taskId => {\n//     dispatch(toggleTodo(taskId));\n//   };\n//   const filterTodos = () => {\n//     const normalizedFilter = filter.toLowerCase();\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.includes(normalizedFilter) ||\n//         todo.description.includes(normalizedFilter)\n//     );\n//   };\n//   const addTask = ({ name, description, deadline, priority }) => {\n//     /*\n//      * action must be called inside useDispatch, which transport action to reducer factory\n//      */\n//     dispatch(\n//       addTodo({\n//         name: name,\n//         deadline: deadline,\n//         description: description,\n//         priority: priority,\n//       })\n//     );\n//   };\n//   return storeTodos ? (\n//     <TodoContainer\n//       listRef={listRef}\n//       completedTasksNumber={completedTasksNumber}\n//       todos={filterTodos()}\n//       filterTasks={filterTasks}\n//       toggleModal={toggleModal}\n//       deleteTask={deleteTask}\n//       toggleCompleted={toggleCompleted}\n//       addTask={addTask}\n//       showModal={showModal}\n//     />\n//   ) : (\n//     <></>\n//   );\n// }\n// function TodoContainer({\n//   listRef,\n//   completedTasksNumber,\n//   todos,\n//   filterTasks,\n//   toggleModal,\n//   deleteTask,\n//   toggleCompleted,\n//   addTask,\n//   showModal,\n// }) {\n//   const { mainTheme } = useContext(themeContext);\n//   return (\n//     <StyledList ref={listRef}>\n//       <HeaderTextContainer colors={mainTheme.colors}>\n//         <h2>Year Task List</h2>\n//         <Text>Completed: {completedTasksNumber}</Text>\n//         <Text>Total: {todos.length}</Text>\n//         <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n//         <ButtonStyled\n//           colors={mainTheme.colors}\n//           onClick={toggleModal}\n//           aria-label=\"showModal\"\n//           endIcon={<CreateTwoToneIcon />}\n//           addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n//         >\n//           Add Task\n//         </ButtonStyled>\n//       </HeaderTextContainer>\n//       <TodoListWrapper\n//         todoList={todos}\n//         onDelete={deleteTask}\n//         onToggle={toggleCompleted}\n//         themeColors={mainTheme.colors}\n//       />\n//       {showModal && (\n//         <ModalWindow\n//           todolist=\"todolist\"\n//           onSubmit={addTask}\n//           onClick={toggleModal}\n//           mainTheme={mainTheme}\n//         >\n//           <TodoEditor\n//             colors={mainTheme.colors}\n//             onSubmit={addTask}\n//             onClick={toggleModal}\n//           />\n//         </ModalWindow>\n//       )}\n//     </StyledList>\n//   );\n// }\n// export default Todos;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Todos\");\n$RefreshReg$(_c2, \"TodoContainer\");","map":{"version":3,"sources":["/Users/vitaliy/Documents/GitHub/React-Courses/src/pages/Todos/Todos.jsx"],"names":["React","useContext","useState","useEffect","useSelector","useDispatch","fetchTodoRequest","fetchTodoSuccess","fetchTodoError","addTodoRequest","addTodoSuccess","addTodoError","deleteTodoRequest","deleteTodoSuccess","deleteTodoError","toggleCompleteRequest","toggleCompleteSuccess","toggleCompleteError","getTodos","TodoListWrapper","TodoFilter","TodoEditor","ModalWindow","StyledList","HeaderTextContainer","Text","themeContext","ButtonStyled","CreateTwoToneIcon","useModal","Todos","showModal","toggleModal","listRef","createRef","dispatch","storeTodos","state","todoList","todos","filter","completedTasksNumber","reduce","acc","todo","completed","filterTasks","e","setFilter","target","value","console","log","deleteTask","taskId","deleteTodo","toggleCompleted","toggleTodo","filterTodos","normalizedFilter","toLowerCase","name","includes","description","addTask","deadline","priority","addTodo","TodoContainer","mainTheme","colors","length","position","right","top"],"mappings":"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":["import React, { useContext, useState, useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  fetchTodoRequest,\n  fetchTodoSuccess,\n  fetchTodoError,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoError,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoError,\n  toggleCompleteRequest,\n  toggleCompleteSuccess,\n  toggleCompleteError,\n} from 'redux/todos/todoActions';\n\nimport { getTodos } from 'service/apiService';\n\nimport { TodoListWrapper } from './components/TodoListWrapper';\nimport TodoFilter from './components/TodoFilter';\nimport TodoEditor from './components/TodoEditor';\nimport ModalWindow from 'components/ModalWindow';\n\nimport {\n  StyledList,\n  HeaderTextContainer,\n  Text,\n} from './styles/TodoList.styled';\n\nimport { themeContext } from 'context/themeContext';\n\nimport { ButtonStyled } from 'components/CommonComponents';\nimport CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n\nimport { useModal } from 'hooks';\n\nfunction Todos() {\n  const [showModal, toggleModal] = useModal(false);\n  const listRef = React.createRef();\n\n  /*\n   * useDispatch - connect actions with active UI elements\n   * useSelector - returns state elements\n   */\n\n  const dispatch = useDispatch();\n  const storeTodos = useSelector(state => state.todoList.todos);\n  const filter = useSelector(state => state.todoList.filter);\n\n  const completedTasksNumber = storeTodos\n    ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n    : 0;\n\n  const filterTasks = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  console.log(getTodos());\n\n  const deleteTask = taskId => {\n    dispatch(deleteTodo(taskId));\n  };\n\n  const toggleCompleted = taskId => {\n    dispatch(toggleTodo(taskId));\n  };\n\n  const filterTodos = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return storeTodos.filter(\n      todo =>\n        todo.name.includes(normalizedFilter) ||\n        todo.description.includes(normalizedFilter)\n    );\n  };\n\n  const addTask = ({ name, description, deadline, priority }) => {\n    /*\n     * action must be called inside useDispatch, which transport action to reducer factory\n     */\n    dispatch(\n      addTodo({\n        name: name,\n        deadline: deadline,\n        description: description,\n        priority: priority,\n      })\n    );\n  };\n\n  return storeTodos ? (\n    <TodoContainer\n      listRef={listRef}\n      completedTasksNumber={completedTasksNumber}\n      todos={filterTodos()}\n      filterTasks={filterTasks}\n      toggleModal={toggleModal}\n      deleteTask={deleteTask}\n      toggleCompleted={toggleCompleted}\n      addTask={addTask}\n      showModal={showModal}\n    />\n  ) : (\n    <></>\n  );\n}\n\nfunction TodoContainer({\n  listRef,\n  completedTasksNumber,\n  todos,\n  filterTasks,\n  toggleModal,\n  deleteTask,\n  toggleCompleted,\n  addTask,\n  showModal,\n}) {\n  const { mainTheme } = useContext(themeContext);\n\n  return (\n    <StyledList ref={listRef}>\n      <HeaderTextContainer colors={mainTheme.colors}>\n        <h2>Year Task List</h2>\n        <Text>Completed: {completedTasksNumber}</Text>\n        <Text>Total: {todos.length}</Text>\n        <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n        <ButtonStyled\n          colors={mainTheme.colors}\n          onClick={toggleModal}\n          aria-label=\"showModal\"\n          endIcon={<CreateTwoToneIcon />}\n          addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n        >\n          Add Task\n        </ButtonStyled>\n      </HeaderTextContainer>\n\n      <TodoListWrapper\n        todoList={todos}\n        onDelete={deleteTask}\n        onToggle={toggleCompleted}\n        themeColors={mainTheme.colors}\n      />\n      {showModal && (\n        <ModalWindow\n          todolist=\"todolist\"\n          onSubmit={addTask}\n          onClick={toggleModal}\n          mainTheme={mainTheme}\n        >\n          <TodoEditor\n            colors={mainTheme.colors}\n            onSubmit={addTask}\n            onClick={toggleModal}\n          />\n        </ModalWindow>\n      )}\n    </StyledList>\n  );\n}\n\nexport default Todos;\n\n// import React, { useContext, useState, useEffect } from 'react';\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import {\n//   addTodo,\n//   deleteTodo,\n//   toggleTodo,\n//   setFilter,\n// } from 'redux/todos/todoSlice';\n\n// import { getTodos } from 'service/apiService';\n\n// import { TodoListWrapper } from './components/TodoListWrapper';\n// import TodoFilter from './components/TodoFilter';\n// import TodoEditor from './components/TodoEditor';\n// import ModalWindow from 'components/ModalWindow';\n\n// import {\n//   StyledList,\n//   HeaderTextContainer,\n//   Text,\n// } from './styles/TodoList.styled';\n\n// import { themeContext } from 'context/themeContext';\n\n// import { ButtonStyled } from 'components/CommonComponents';\n// import CreateTwoToneIcon from '@mui/icons-material/CreateTwoTone';\n\n// import { useModal } from 'hooks';\n\n// function Todos() {\n//   const [showModal, toggleModal] = useModal(false);\n//   const listRef = React.createRef();\n\n//   /*\n//    * useDispatch - connect actions with active UI elements\n//    * useSelector - returns state elements\n//    */\n\n//   const dispatch = useDispatch();\n//   const storeTodos = useSelector(state => state.todoList.todos);\n//   const filter = useSelector(state => state.todoList.filter);\n\n//   const completedTasksNumber = storeTodos\n//     ? storeTodos.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0)\n//     : 0;\n\n//   const filterTasks = e => {\n//     dispatch(setFilter(e.target.value));\n//   };\n\n//   console.log(getTodos());\n\n//   const deleteTask = taskId => {\n//     dispatch(deleteTodo(taskId));\n//   };\n\n//   const toggleCompleted = taskId => {\n//     dispatch(toggleTodo(taskId));\n//   };\n\n//   const filterTodos = () => {\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return storeTodos.filter(\n//       todo =>\n//         todo.name.includes(normalizedFilter) ||\n//         todo.description.includes(normalizedFilter)\n//     );\n//   };\n\n//   const addTask = ({ name, description, deadline, priority }) => {\n//     /*\n//      * action must be called inside useDispatch, which transport action to reducer factory\n//      */\n//     dispatch(\n//       addTodo({\n//         name: name,\n//         deadline: deadline,\n//         description: description,\n//         priority: priority,\n//       })\n//     );\n//   };\n\n//   return storeTodos ? (\n//     <TodoContainer\n//       listRef={listRef}\n//       completedTasksNumber={completedTasksNumber}\n//       todos={filterTodos()}\n//       filterTasks={filterTasks}\n//       toggleModal={toggleModal}\n//       deleteTask={deleteTask}\n//       toggleCompleted={toggleCompleted}\n//       addTask={addTask}\n//       showModal={showModal}\n//     />\n//   ) : (\n//     <></>\n//   );\n// }\n\n// function TodoContainer({\n//   listRef,\n//   completedTasksNumber,\n//   todos,\n//   filterTasks,\n//   toggleModal,\n//   deleteTask,\n//   toggleCompleted,\n//   addTask,\n//   showModal,\n// }) {\n//   const { mainTheme } = useContext(themeContext);\n\n//   return (\n//     <StyledList ref={listRef}>\n//       <HeaderTextContainer colors={mainTheme.colors}>\n//         <h2>Year Task List</h2>\n//         <Text>Completed: {completedTasksNumber}</Text>\n//         <Text>Total: {todos.length}</Text>\n//         <TodoFilter colors={mainTheme.colors} onChange={filterTasks} />\n//         <ButtonStyled\n//           colors={mainTheme.colors}\n//           onClick={toggleModal}\n//           aria-label=\"showModal\"\n//           endIcon={<CreateTwoToneIcon />}\n//           addFeat={{ position: 'absolute', right: '10px', top: '10px' }}\n//         >\n//           Add Task\n//         </ButtonStyled>\n//       </HeaderTextContainer>\n\n//       <TodoListWrapper\n//         todoList={todos}\n//         onDelete={deleteTask}\n//         onToggle={toggleCompleted}\n//         themeColors={mainTheme.colors}\n//       />\n//       {showModal && (\n//         <ModalWindow\n//           todolist=\"todolist\"\n//           onSubmit={addTask}\n//           onClick={toggleModal}\n//           mainTheme={mainTheme}\n//         >\n//           <TodoEditor\n//             colors={mainTheme.colors}\n//             onSubmit={addTask}\n//             onClick={toggleModal}\n//           />\n//         </ModalWindow>\n//       )}\n//     </StyledList>\n//   );\n// }\n\n// export default Todos;\n"]},"metadata":{},"sourceType":"module"}